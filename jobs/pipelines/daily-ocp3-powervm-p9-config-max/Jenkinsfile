@Library('pcloud-jenkins-library') _
//Define global variables
def AUTH_URL
def ZONE
def IMAGE
def MASTER
def WORKER
def MANAGER
def GLUSTER
def VA
def PROXY
def TIMEOUT_SEC
def TIMEOUT_MIN
def CONF
def IMAGE_DISTRO
env.DISTRO = ""

pipeline {
    agent {
        dockerfile {
            dir 'images/terraform'
            additionalBuildArgs '--force-rm	--no-cache'
            args '-v /etc/resolv.conf:/etc/resolv.conf'
            label 'daily-x86_64'
        }
    }
    triggers {
        cron('H H * * *')
    }
    environment {
        //users and credentials. All must be defined in Jenkins Credentials
        GITHUB_USER = credentials('GITHUB_USER')
        TF_VAR_user_name = credentials('GITHUB_USER')
        DOCKER_USER = credentials('DOCKER_USER')
        ARTIFACTORY_USER = credentials('ARTIFACTORY_USER')
        TF_VAR_repo_user = credentials('GITHUB_USER')
        TF_VAR_password = credentials('TF_VAR_password')
        OS_USERNAME = credentials('GITHUB_USER')
        OS_PASSWORD = credentials('TF_VAR_password')
        OS_INSECURE = true
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        ARTIFACTORY_TOKEN = credentials('ARTIFACTORY_TOKEN')
        REDHAT_USERNAME = credentials('REDHAT_USERNAME')
        REDHAT_PASSWORD = credentials('REDHAT_PASSWORD')
        FVD_USERNAME = credentials('GITHUB_USER')
        FVD_PASSWORD = credentials('TF_VAR_password')


        //Env constants
        FUNCTIONAL_TEST_REPO = "icp-sanity-bats"
        TERRAFORM_VER = "0.11.13"
        TEST_SUITE = "ppc64le-edge"
        OS = "linux"
        OS_IDENTITY_API_VERSION='3'
        OS_TENANT_NAME="ibm-default"
        OS_USER_DOMAIN_NAME="default"
        OS_PROJECT_DOMAIN_NAME="Default"
        OS_COMPUTE_API_VERSION=2.37
        OS_NETWORK_API_VERSION=2.0
        OS_IMAGE_API_VERSION=2
        OS_VOLUME_API_VERSION=2
        OS_PRIVATE_NETWORK = "icp_network2"
        OS_NETWORK = "icp_network2"
        

        VCPUS_REQ_MASTER = "16"
        MEM_REQ_MASTER = "64"
        PRO_UNIT_REQ_MASTER = ".8"
        VCPUS_REQ_WORKER = "4"
        MEM_REQ_WORKER = "8"
        PRO_UNIT_REQ_WORKER = ".2"

        MASTER_TEMPLATE = "${env.BUILD_TAG}" + "-" + "master"
        MANAGER_TEMPLATE = "${env.BUILD_TAG}" + "-" + "master"
        WORKER_TEMPLATE = "${env.BUILD_TAG}" + "-" + "worker"
        VA_TEMPLATE = "${env.BUILD_TAG}" + "-" + "master"
        PROXY_TEMPLATE = "${env.BUILD_TAG}" + "-" + "worker"
        GLUSTER_TEMPLATE = "${env.BUILD_TAG}" + "-" + "worker"

        VIR_CHOSE = "PowerVM"
        HARDWARE_CHOSE="P9"
        DISTRO_CHOSE = "RHEL7.6-ALT"
        DEPLOY_REPO = "daily"
        ICP_VERSION = "latest"
        ICP_FIXPACK = ""
        ICP_EDITION = "ee"
        ICP_ADDITIONAL_CONFIG = ""
        SERVER_CONFIG = "Max"
        
        boolean DEPLOY_VA = false
        boolean DEPLOY_MANAGER = false
        boolean DEPLOY_WORKER = true
        boolean DEPLOY_PROXY = false
        boolean ENABLE_GLUSTER = false
        boolean DEPLOY_MASTER = true
        VA = "disabled"
        ISTIO = "disabled"
        MCM = "enabled"
        NPDD = "disabled"
        PSN = "enabled"
        MINIO = "disabled"
        KNATIVE = "disabled"
        GLUSTER_FS = "enabled"

        SYSTEM_TUNING = "disabled"

        NUM_OF_WORKERS = "${DEPLOY_WORKER == true ? 1 : 0}"
        NUM_OF_MASTERS = "${DEPLOY_MASTER == true ? 1 : 0}"
        NUM_OF_MANAGERS = "${DEPLOY_MANAGER == true ? 1 : 0}"
        NUM_OF_PROXIES = "${DEPLOY_PROXY == true ? 1 : 0}"
        NUM_OF_GLUSTERS = "${ENABLE_GLUSTER == true ? 3 : 0}"
        NUM_OF_VA = "${DEPLOY_VA == true ? 1 : 0}"

        ROOK_DISK_SIZE = "50"
        ENABLED_MANAGEMENT_SERVICES = "multicluster-endpoint multicluster-hub monitoring logging"
        ICP_CONFIG_FILE="power.openshift.config.yaml"
        SKIP_ICP_INSTALL="true"
        OS_INSTANCE_FLAVOUR="${MASTER_TEMPLATE}"
        ICP_INSTALLER_TAG="latest"
        STORAGE = "fvd"
        
        TIMEOUT = "0"
        TARGET = "deploy-openshift-powervc"
        TEMPLATE_FILE = ".${TARGET}.tfvars.template"
        OFFLINE_IMAGE_LOCATION = ""
        OCP_ENV = true
        IMAGE_FILTER = "${OCP_ENV == true ? "openshift" : "cicd"}"
        REDHAT_RELEASE = "7.6"

        //To pick build-harness . Remove once the Makefile.openshift_pvc upstreamed
        //BUILD_HARNESS_ORG="sudeeshjohn"
	}
    stages {
        stage('Prepare Terraform Template') 
        {
            steps {
                script 
                {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try
                    {
                        MEM_WORKER_GB = MEM_REQ_WORKER.toInteger()
                        MEM_REQ_WORKER_MB = MEM_WORKER_GB * 1024

                        MEM_MASTER_GB = MEM_REQ_MASTER.toInteger()
                        MEM_REQ_MASTER_MB = MEM_MASTER_GB * 1024

                        echo 'Setting-up terraform template file for Max Config PowerVM!'
                        env.AUTH_URL="https://9.114.192.168:5000/v3/"
                            //env.AUTH_URL=sh(returnStdout: true, script: "grep AUTH_URL conf/infra/pvm.conf|awk 'BEGIN{FS=\"AUTH_URL=\"}{print \$2}'|tr '\n' ' '").trim()
                        env.AVAILABILITY_ZONE=getZone(env.VIR_CHOSE, HARDWARE_CHOSE )
                        if ("${env.AVAILABILITY_ZONE}" == null)
                        {
                            echo "Requested zone could not find"
                            error('Requested zone could not find')
                        }
                        env.OS_IMAGE=getTheImage(env.AUTH_URL, env.DISTRO_CHOSE, env.IMAGE_FILTER )
                        env.IMAGE_DISTRO = "${env.DISTRO}"
                        if ("${env.OS_IMAGE}" == "")
                        {
                            echo "Requested image could not find in ${env.AUTH_URL}"
                            error('Requested image could not find')

                        }
                        status=createTemplate(env.AUTH_URL, env.VCPUS_REQ_MASTER, "${MEM_REQ_MASTER_MB}", env.PRO_UNIT_REQ_MASTER, env.MASTER_TEMPLATE)
                        if ( status != 0)
                        {
                            echo "Unable to create template ${env.MASTER_TEMPLATE}"
                        }
                        status=createTemplate(env.AUTH_URL, VCPUS_REQ_WORKER, "${MEM_REQ_WORKER_MB}", PRO_UNIT_REQ_WORKER, WORKER_TEMPLATE)
                        if ( status != 0)
                        {
                            echo "Unable to create template ${env.WORKER_TEMPLATE}"
                        }
                    }
                    catch (err)
                    {
                        echo 'Error ! Template prepration failed !'
                        getArtifactsAndClean(env.AUTH_URL)
                        throw err
                    }
                }
            }
        }
        stage('Initialize Environment') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                        echo 'Initializing supporting repos and keys !'

                        cd ${WORKSPACE}/deploy
                        make init
                        make keys
                        make setup-dependencies
                        '''
                        }
                    catch (err) {
                        echo 'Error ! ENV setup failed!'
                        getArtifactsAndClean(env.AUTH_URL)
                        throw err
                    }
                }
            }
        }
        stage('Deploy ICP Cluster') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                        echo 'Deploying Cluster!'

                        cd ${WORKSPACE}/deploy
                        #make VERSION=$ICP_VERSION $TARGET
                        make $TARGET
                        sleep 60
                        '''
                        }
                    catch (err) {
                        echo 'Error ! Tearing off the cluster !'
                        getArtifactsAndClean(env.AUTH_URL)
                        throw err
                    }
                }
            }
        }
        stage('Setup Cloudctl') {
            when {
                    expression {
                        return env.SKIP_ICP_INSTALL != "true";
                    }
                }
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                        echo 'Setting up the cloudctl!'

                        cd ${WORKSPACE}/deploy
                        make $TARGET:config
                        '''
                        }
                    catch (err) {
                        echo 'Error ! Tearing off the cluster !'
                        getArtifactsAndClean(env.AUTH_URL)
                        throw err
                    }
                }
            }
        }
        stage('Run SERT Test') {
            when {
                    expression {
                        return env.SKIP_ICP_INSTALL != "true";
                    }
            }
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                        echo 'Running SERT test!'
                        cd ${WORKSPACE}/deploy

                        make run-functional-tests
                        '''
                        }
                    catch (err) {
                        echo ' SERT Test Completed '
                        getArtifactsAndClean(env.AUTH_URL)
                    }
                }
            }
        }
        stage('Waiting to timeout') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                        echo 'waiting to time out'
                        '''
                        }
                    finally {
                        TIMEOUT_MIN = TIMEOUT.toInteger()
                        if ( TIMEOUT_MIN != 0 )
                        {
                            TIMEOUT_SEC=TIMEOUT_MIN*60
                        }
                        echo "HOLDING THE CLUSTER TEAR DOWN FOR ${TIMEOUT_MIN} MINUTES"
                        sleep TIMEOUT_SEC
                        getArtifactsAndClean(env.AUTH_URL)
                    }
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts allowEmptyArchive: true, artifacts: 'deploy/systeminfo.txt.tar.gz', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: 'deploy/cluster.tar.gz', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: 'deploy/cluster/config.yaml', fingerprint: true, onlyIfSuccessful: false           
            archiveArtifacts allowEmptyArchive: true, artifacts: 'deploy/vars.tfvars', fingerprint: true, onlyIfSuccessful: false
            cleanWs()
            notifyBySlack(currentBuild.result) 
        }
    }
}