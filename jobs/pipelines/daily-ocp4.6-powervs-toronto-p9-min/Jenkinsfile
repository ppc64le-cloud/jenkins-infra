@Library('pcloud-jenkins-library') _
//Define global variables
env.DISTRO = ""
env.BASTION_IP = ""
boolean DEPLOYMENT_STATUS = false

pipeline {
    agent {
        dockerfile {
            dir 'images/powervs'
            additionalBuildArgs '--force-rm	--no-cache'
            args '-v /etc/resolv.conf:/etc/resolv.conf'
            label 'daily-x86_64'
        }
    }
    environment {
        //users and credentials. All must be defined in Jenkins Credentials
        GITHUB_USER = credentials('GITHUB_USER')
        IBMCLOUD_API_KEY = credentials('IBMCLOUD_API_KEY')
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        REDHAT_USERNAME = credentials('REDHAT_USERNAME')
        REDHAT_PASSWORD = credentials('REDHAT_PASSWORD')


        //Env constants
        TERRAFORM_VER = "0.13.4"
        IBM_CLOUD_REGION = "tor"
        IBM_CLOUD_ZONE = "tor01"
        SERVICE_INSTANCE_ID = "4a1f10a2-0797-4ac8-9c41-44bc04b2d18f"

        BASTION_IMAGE_NAME = "rhel-83-02182021"
        RHCOS_IMAGE_NAME = "rhcos-46-09182020"
        OCP_RELEASE = "4.6"

        //e2e specific variables
        ENABLE_E2E_TEST = "true"
        GOLANG_TARBALL = "https://golang.org/dl/go1.15.2.linux-ppc64le.tar.gz"

        //Makefile variables
        OPENSHIFT_POWERVS_GIT_TF_DEPLOY_BRANCH="release-4.6" //The download branch

        TARGET = "deploy-openshift4-powervs"
        TEMPLATE_FILE = ".${TARGET}.tfvars.template"
        POWERVS = true
        SCRIPT_DEPLOYMENT = false
        WAIT_FOR_DEBUG = "1"
	 }

    stages {
        stage('Clone ansible extra') {
            steps {
                cloneRepo("git@github.ibm.com:redstack-power/ocp4_ansible_extras.git", "ansible_extra")
            }
        }
        stage('Setup Common Environment Variables') {
            steps {
                setupCommonEnvironmentVariables()
                setupClusterConfig("min")
            }
        }
        stage('pull artifact') {
            steps {
                getArtifacts("mirror-openshift-release", "latest-${OCP_RELEASE}-build.txt" )
            }
        }
        //Checkout the installer git repo
        stage('Prepare Terraform Template') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try
                    {
                        env.OPENSHIFT_IMAGE = ""
                        env.OCP_RELEASE_TAG = ""
                        if (fileExists('artifactory/latest-4.6-build.txt')) {
                            env.OPENSHIFT_IMAGE = readFile 'artifactory/latest-4.6-build.txt'
                            env.OPENSHIFT_IMAGE = env.OPENSHIFT_IMAGE.trim()
                            env.OCP_RELEASE_TAG = env.OPENSHIFT_IMAGE.split(":")[1].trim()
                        }
                        env.OPENSHIFT_INSTALL_TARBALL=getOpenshiftBuild(OCP_RELEASE)
                        if ("${env.OPENSHIFT_INSTALL_TARBALL}" == "null" )
                        {
                            echo "Unable to find openshift install tarball. falling back to default"
                            env.OPENSHIFT_INSTALL_TARBALL="https://mirror.openshift.com/pub/openshift-v4/ppc64le/clients/ocp-dev-preview/4.6.0-0.nightly-ppc64le-2020-10-03-224643/openshift-install-linux.tar.gz"
                        }
                        env.OPENSHIFT_CLIENT_TARBALL=getOpenshiftClient(OCP_RELEASE)
                        if ("${env.OPENSHIFT_CLIENT_TARBALL}" == "null")
                        {
                            env.OPENSHIFT_CLIENT_TARBALL="https://mirror.openshift.com/pub/openshift-v4/ppc64le/clients/ocp-dev-preview/4.6.0-0.nightly-ppc64le-2020-10-03-224643/openshift-client-linux.tar.gz"
                        }
                        env.OPENSHIFT_CLIENT_TARBALL_AMD64=getOpenshiftClientAMD(OCP_RELEASE)
                        if ("${env.OPENSHIFT_CLIENT_TARBALL_AMD64}" == "null")
                        {
                            env.OPENSHIFT_CLIENT_TARBALL_AMD64="https://mirror.openshift.com/pub/openshift-v4/clients/ocp-dev-preview/4.6.0-0.nightly-2020-10-03-051134/openshift-client-linux.tar.gz"
                        }
                    }
                    catch (err)
                    {
                        echo 'Error ! Template preparation failed !'
                        getArtifactsAndCleanOcp4()
                        throw err
                    }
                }
            }
        }
        stage('Setup terraform plugin') {
            steps {
                setupTerraformPlugin()
            }
        }
        stage('Initialize Environment') {
            steps {
                initializeEnvironment()
            }
        }
        stage('Deploy OCP Cluster') {
            steps {
                deployCluster()
            }
        }
        stage('Run crontab script for capturing outputs of multiple commands') {
            steps {
                crontabCommandCaptureScript()
            }
        }
        stage('Setup and run ansible extra') {
            steps {
               setupAndRunE2e()
            }
        }

        stage('Setup Kubectl') {
            steps {
                setupKubeconfigOcp4()
            }
        }

        stage('Gather pprof and prometheus data') {
            steps {
                gatherPrometheusData()
            }
        }
    }
    post {
        always {
            getArtifactsAndCleanOcp4()
            archiveAllArtifacts("deploy/conformance-parallel-out.txt.tar.gz", "deploy/summary.txt", "deploy/vars.tfvars",
                "cpu-pre.pprof", "heap-pre.pprof", "prometheus.tar.gz", "deploy/cron.log")
            processE2eResults()
            notifyBySlack(currentBuild.result, env.MESSAGE)
            cleanWs()
        }
    }
}
