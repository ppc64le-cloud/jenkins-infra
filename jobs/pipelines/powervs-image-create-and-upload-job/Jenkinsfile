@Library('pcloud-jenkins-library') _
pipeline {
    agent any
    parameters {
	    string(defaultValue: '', description: 'Rhel Url', name: 'RhelUrl')
	    string(defaultValue: '', description: 'Rhcos Url', name: 'RhcosUrl')
	    string(defaultValue: '', description: 'Centos Url', name: 'CentosUrl')
        string(defaultValue: 'v0.1.1-alpha.6', description: "Pvsadm version", name: 'pvsadmVersion')
	    text(defaultValue: '''ocp-addons-toronto-01
                            ocp-addons-frankfurt-01
                            ocp-cicd-dallas
                            ocp-cicd-dallas-12
                            ocp-cicd-frankfurt-01
                            ocp-cicd-frankfurt-02
                            ocp-cicd-london-06
                            ocp-cicd-osaka-21
                            ocp-cicd-saopaulo-01
                            ocp-cicd-sydney-04
                            ocp-cicd-tokyo-04
                            ocp-cicd-toronto-01
                            ocp-cicd-washington
                            ocp-dev-frankfurt-01
                            ocp-garage-frankfurt-01
                            ocp-garage-sydney-04
                            ocp-garage-toronto-01
                            ocp-internal-frankfurt-01
                            ocp-internal-london-04
                            ocp-ocs-london-06
                            ocp-ocs-saopaulo
                            ocp-ocs-tokyo-04
                            ocp-powervs-tok04
                            ocp-powervs-tor01
                            ocp-validation-frankfurt-02
                            ocp-validation-osaka-21
                            ocp-validation-sydney-04
                            ocp-validation-toronto-01
                            ocp-validation-saopaulo-01
                            ocp-validation-montreal-01
                            powervs-ipi-lon04
                            rh-runtimes-toronto-01
                            ocp-operator-toronto-01
                            ocp-powervs-dallas-operator-scrum
                            ocp-pvsadm-test-instance
                            upstream-core-lon04
                            upstream-core-osa21
                            prow-infra-toronto
                            prow-testbed-fra01
                            prow-testbed-fra02
                            prow-testbed-lon04
                            prow-testbed-lon06
                            prow-testbed-syd04
                            prow-testbed-tok04''',
                            name: 'instance_list')
	}
    environment {
        //Credentials. All must be defined in Jenkins Credentials
        IBMCLOUD_API_KEY = credentials('IBMCLOUD_API_KEY')
        RHEL_SUBSCRIPTION_USERNAME = credentials('REDHAT_USERNAME')
        RHEL_SUBSCRIPTION_PASSWORD = credentials('REDHAT_PASSWORD')
        //Parameters
        RHEL_URL = "${params.RhelUrl.trim()}"
        CENTOS_URL = "${params.CentosUrl.trim()}"
        RHCOS_URL = "${params.RhcosUrl.trim()}"
        PVSADM_VERSION="${params.pvsadmVersion.trim()}"
	}

    stages {
        stage('Run script to create and upload image') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        def text=""
                        params.instance_list.split("\n").each {
                           instance -> text=text + "${instance.trim()}" + "\n"
                        }
                        writeFile file: 'scripts/powervs_instance_list.txt', text: text+"\n"
                        sh '''
                            cd ${WORKSPACE}/scripts
                            chmod +x convert-upload-image-powervs.sh
                            ./convert-upload-image-powervs.sh --rhel-url "${RHEL_URL}" --rhcos-url "${RHCOS_URL}" --centos-url "${CENTOS_URL}" --cos-bucket 'ocp4-images-bucket' --region 'us-south' --cos-instance-name 'ocp4-on-power' --pvsadm_version "${PVSADM_VERSION}"
                        '''
                        }
                    catch (err) {
                        echo 'Error ! Create and upload image failed!'
                        throw err
                    }
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts allowEmptyArchive: true, artifacts: 'scripts/output.txt', fingerprint: true, onlyIfSuccessful: true
            archiveArtifacts allowEmptyArchive: true, artifacts: 'scripts/logs.tar.gz', fingerprint: true, onlyIfSuccessful: true
            cleanWs()
            notifyBySlack(currentBuild.result, " ")
        }
    }
}
