@Library('pcloud-jenkins-library') _

//Get Infra and OS from user
properties([
    parameters([
        [$class: 'ChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the Type of Build from the Dropdown List', 
            filterLength: 1, 
            filterable: false,
            name: 'Build',
            randomName: 'choice-parameter-66333314439613978',
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Env\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return["Online:selected","offline"]'
                ]
            ]
        ], 

        [$class: 'CascadeChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the ICP/Cloudpack version from the Dropdown List', 
            filterLength: 1, 
            filterable: false, 
            name: 'Version', 
            randomName: 'choice-parameter-7931314456178619', 
            referencedParameters: 'Repo, Build', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Environment from Env Param\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        ''' 
                        return["3.2.1","3.2.2:selected", "3.2.3", "3.2.4", "3.2.5", "3.2.1.1910", "3.2.1.1911", "3.2.1.2001", "3.2.1.2003", "3.2.6", "3.2.7", "3.3", "3.2.8", "3.2.2.2006"]
                        '''
                ]
            ]
        ],

        [$class: 'CascadeChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the Artifactory Repository from the Dropdown List', 
            filterLength: 1, 
            filterable: false, 
            name: 'Repo',
            randomName: 'choice-parameter-6631314439613978',
            referencedParameters: 'Build',
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Env\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return["daily","edge","stash","stable","release"]'
                ]
            ]
        ], 

        [$class: 'CascadeChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the Build directory from the Dropdown List', 
            filterLength: 1, 
            filterable: false, 
            name: 'BuildDir', 
            randomName: 'choice-parameter-7932394656178619', 
            referencedParameters: 'Repo, Build, Version', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Environment from Env Param\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        ''' 
                        import hudson.util.Secret
                        import jenkins.model.*
                        import com.cloudbees.plugins.credentials.CredentialsProvider
                        import com.cloudbees.plugins.credentials.common.StandardUsernameCredentials
                        if (Build.equals("offline")){
                                instance = Jenkins.getInstance()
                                globalNodeProperties = instance.getGlobalNodeProperties()
                                def user = ""
                                def pass = ""

                                globalNodeProperties.each {
                                    envVars = it.getEnvVars()
                                    if (envVars.get('username') != null) {
                                        user = envVars.get('username');
                                    }
                                    if (envVars.get('password') != null) {
                                        pass = envVars.get('password');
                                    }
                                }
                                def command = """ wget  --output-document  -  https://na.artifactory.swg-devops.com/artifactory/hyc-cloud-private-$Repo-generic-local/offline/ --http-user ${user} --http-password ${pass}"""
                                build = command.execute().text
                                def min1 = ~/<a href="/
                                def min3 = ~/\\/">.*/
                                def min4 = ~/\\[/
                                def ls =''
                                build.eachLine{
                                    if (it =~ /^<a/) {
                                        String lst = it.findAll(/<a href=".*/)
                                        ls = ls + " " + (lst - min1)
                                        ls = ls - min3
                                        ls = ls - min4
                                    }
                                }
                                bld = ls.split() as List
                                return bld
                            }
                            else 
                            {
                                return["Ignore This for Online"]
                            }

                        '''
                ]
            ]
        ],

        [$class: 'CascadeChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the Tarball from the Dropdown List(NOTE: Ignore for Online deployment)', 
            filterLength: 1, 
            filterable: false, 
            name: 'OfflineImage', 
            randomName: 'choice-parameter-79344564456178619', 
            referencedParameters: 'Repo, Version, Build, BuildDir', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Environment from Env Param\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        ''' 
                            import jenkins.model.*
                            import hudson.util.Secret
                            import jenkins.model.*
                            import com.cloudbees.plugins.credentials.CredentialsProvider
                            import com.cloudbees.plugins.credentials.common.StandardUsernameCredentials

                            if (Build.equals("offline")){
                                instance = Jenkins.getInstance()
                                globalNodeProperties = instance.getGlobalNodeProperties()
                                user = ""
                                pass = ""
                                globalNodeProperties.each {
                                    envVars = it.getEnvVars()
                                    if (envVars.get('username') != null) {
                                        user = envVars.get('username');
                                    }
                                    if (envVars.get('password') != null) {
                                        pass = envVars.get('password');
                                    }
                                }
                                def repo = "https://na.artifactory.swg-devops.com/artifactory/hyc-cloud-private-$Repo-generic-local/offline/$BuildDir/"
                                links = ''
                                links = getlinks(repo)
                                return  links.tokenize()
                            }
                            else {
                                return["Ignore This for Online"]
                            }

                            def getlinks(repo) {
                                def repo1 = repo
                                def links1 = ''
                                if (repo1.contains("tar.gz")){
                                    if (repo1.contains("ppc64le")){
                                        return repo1
                                    }
                                }
                                if (repo1.contains("tar.gz")){
                                    if ( ! repo1.contains("ppc64le")){
                                        return
                                    }
                                }
				                if (repo1.contains("tgz")){
                                    if (repo1.contains("ppc64le")){
                                        return repo1
                                    }
                                }
                                if (repo1.contains("tgz")){
                                    if ( ! repo1.contains("ppc64le")){
                                        return
                                    }
                                }
                                if (repo1.contains("zip")){
                                    return
                                }
                                if (repo1.isEmpty()){
                                    return
                                }
                                def command = """ wget  --output-document  - $repo1 --http-user ${user} --http-password ${pass}"""
                                build = command.execute().text
                                def min1 = ~/<a href="/
                                def min2 = ~/">.*/
                                def min3 = ~/\\/">.*/
                                def min4 = ~/\\[/
                                def ls =''
                                build.eachLine{
                                    if (it =~ /^<a/) {
                                        String lst = it.findAll(/<a href=".*/)
                                                lst = lst - min1
                                                lst = lst - min2
                                                lst = lst - min3
                                                lst = lst - min4
                                                ls = ls + " " + lst
                                    }
                                }
                                for ( String subdir:  ls.split() ){
                                    repo2 = repo1  + subdir
                                    links1 = links1 + " " + getlinks(repo2)
                                }
                                return links1.trim()
                            }
                        '''
                ]
            ]
        ],
        [$class: 'ChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the Operating System from the Dropdown List', 
            filterLength: 1, 
            filterable: false, 
            name: 'Virtualization',
            randomName: 'choice-parameter-5631314439613978', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Env\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return["KVM","PowerVM:selected"]'
                ]
            ]
        ], 
        [$class: 'CascadeChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the Server from the Dropdown List', 
            filterLength: 1, 
            filterable: false, 
            name: 'Hardware', 
            randomName: 'choice-parameter-5631314456178619', 
            referencedParameters: 'Virtualization', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Environment from Env Param\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        ''' if (Virtualization.equals("KVM")){
                                return["P9","P8:selected"]
                            }
                            else if(Virtualization.equals("PowerVM")){
                                return["P8:selected","P9"]
                            }
                        '''
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the Server from the Dropdown List', 
            filterLength: 1, 
            filterable: false, 
            name: 'Operatingsystem', 
            randomName: 'choice-parameter-5631314456178610', 
            referencedParameters: 'Hardware, Virtualization', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Environment from Env Param\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        ''' if (Hardware.equals("P8") && Virtualization.equals("KVM")){
                                return["RHEL7.6","RHEL7.5"]
                            }
                            else if(Hardware.equals("P9") && Virtualization.equals("PowerVM")){
                                return["RHEL7.6-ALT","RHEL7.6","RHEL7.5-ALT","RHEL7.5"]
                            }
                            else if(Hardware.equals("P9") && Virtualization.equals("KVM")){
                                return["RHEL7.6-ALT","RHEL7.6","RHEL7.5-ALT","RHEL7.5"]
                            }
                            else if(Hardware.equals("P8") && Virtualization.equals("PowerVM")){
                                return["RHEL7.6","RHEL7.5"]
                            }
                        '''
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the network from the Dropdown List(preferably icp_network1..(icp_network:181(VLAN=2079))icp_network1:64(VLAND:2230))', 
            filterLength: 1, 
            filterable: false, 
            name: 'Network', 
            randomName: 'choice-parameter-563131889956178610', 
            referencedParameters: 'Virtualization', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Environment from Env Param\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        ''' if (Virtualization.equals("KVM")){
                                return["icp_network"]
                            }
                            else if(Virtualization.equals("PowerVM")){
                                return["icp_network2", "icp_network1", "icp_network"]
                            }
                        '''
                ]
            ]
        ]
    ])
])
//Define global variables
def AUTH_URL
def AVAILABILITY_ZONE
def IMAGE
def MASTER
def WORKER
def MANAGER
def GLUSTER
def VA
def PROXY
def TIMEOUT_SEC
def TIMEOUT_MIN
def CONF
def ICP_CONFIG_FILE
def MASTER_TEMPLATE
def IMAGE_DISTRO
env.DISTRO = ""

pipeline {
    agent {
        dockerfile {
            dir 'images/terraform'
            additionalBuildArgs '--force-rm	--no-cache'
            args '-v /etc/resolv.conf:/etc/resolv.conf'
            label 'daily-x86_64'
        }
    }
    parameters {
        string(defaultValue: '8', description: 'Required Number of VCPUs(master,va,manager)', name: 'VcpusMaster')
        string(defaultValue: '32', description: 'Required amount Memory(master,va,manager)', name: 'MemMaster')
        string(defaultValue: '.4', description: 'Required Processing Units(master,va,manager)Specify a value of processor units that is not greater than the value of virtual processors or less than five percent of the value of virtual processors.', name: 'ProUnitMaster')
        //choice(name: 'ServerConfig', choices: 'Max\nMid\nMin', description: 'Choose The machine configuration(Max: 16cpu, 64G ;Mid: 32G,4cpu, Min:2cpu, 16G)')
        booleanParam(defaultValue: true, name: 'DeployMaster', description: 'Select if you want to Deploy Master node')
        string(defaultValue: '1', description: 'Enter Number of Masters needed', name: 'NumOfMasters')
        booleanParam(defaultValue: false, name: 'DeployVA', description: 'Select if you want to Deploy VA node')
        booleanParam(defaultValue: false, name: 'DeployManager', description: 'Select if you want to Deploy Management node')
        string(defaultValue: '1', description: 'Enter Number of Management Nodes needed', name: 'NumOfManagers')
        booleanParam(defaultValue: false, name: 'DeployProxy', description: 'Select if you want to Deploy Proxy node')
        string(defaultValue: '1', description: 'Enter Number of Proxy Nodes needed', name: 'NumOfProxies')
        booleanParam(defaultValue: false, name: 'DeployWorker', description: 'Select if you want to Deploy Worker node')
        string(defaultValue: '4', description: 'Required Number of VCPUs(worker, gluster, proxy)', name: 'VcpusWorker')
        string(defaultValue: '16', description: 'Required amount Memory(worker, gluster, proxy)', name: 'MemWorker')
        string(defaultValue: '.2', description: 'Required Processing Units(worker, gluster, proxy)Specify a value of processor units that is not greater than the value of virtual processors or less than five percent of the value of virtual processors.', name: 'ProUnitWorker')
        string(defaultValue: '1', description: 'Enter Number of workers needed', name: 'NumOfWorkers')
        //booleanParam(defaultValue: false, name: 'EnableGluster', description: 'Select if you want to enable Gluster Persistant storage')
        //string(defaultValue: '3', description: 'Enter Number of workers needed', name: 'NumOfGlusters')
        //booleanParam(defaultValue: false, name: 'EnableIstio', description: 'Select if you want to enable istio(Provide the required configuration in ICPConfig)')
        booleanParam(defaultValue: false, name: 'EnableMCM', description: 'Select if you want to enable multicluster-endpoint(Provide the required configuration in ICPConfig)')
        booleanParam(defaultValue: false, name: 'EnableMonitoring', description: 'Select if you want to enable Monitoring)')
        booleanParam(defaultValue: false, name: 'EnableLogging', description: 'Select if you want to enable Logging)')
        booleanParam(defaultValue: false, name: 'DeployICP', description: 'Select if you want to install icp on top on OCP-3.1.1)')
        //booleanParam(defaultValue: false, name: 'EnableNodeProblemDetector', description: 'Select if you want to enable node-problem-detector-draino')
        //booleanParam(defaultValue: false, name: 'EnablePlatformSecurity', description: 'Select if you want to enable platform-security-netpols')
        //booleanParam(defaultValue: false, name: 'EnableStorageMinio', description: 'Select if you want to enable storage-minio(Provide the required configuration in ICPConfig)')
        //booleanParam(defaultValue: false, name: 'EnableKnative', description: 'Select if you want to enable knative(Provide the required configuration in ICPConfig)')
        //booleanParam(defaultValue: false, name: 'EnableKmsPlugin', description: 'Select if you want to enable kmsplugin')
        //booleanParam(defaultValue: false, name: 'SystemTuning', description: 'Select if you want to have system tuning for performance')
        text(name: 'ICPConfig', defaultValue: '', description: 'Paste the additional ICP config in yaml format')
        string(defaultValue: '0', description: 'Enter time(in Minutes) to retain the cluster', name: 'KeepFor')
        choice(name: 'StorageType', choices: 'fvd\nrook', description: 'Choose the Persistance storage type')
        string(defaultValue: '300', description: 'Enter the size of the rook volume', name: 'RookSize')

    }
    environment {
        //users and credentials. All must be defined in Jenkins Credentials
        GITHUB_USER = credentials('GITHUB_USER')
        TF_VAR_user_name = credentials('GITHUB_USER')
        DOCKER_USER = credentials('DOCKER_USER')
        ARTIFACTORY_USER = credentials('ARTIFACTORY_USER')
        TF_VAR_repo_user = credentials('GITHUB_USER')
        TF_VAR_password = credentials('TF_VAR_password')
        OS_USERNAME = credentials('GITHUB_USER')
        OS_PASSWORD = credentials('TF_VAR_password')
        OS_INSECURE = true
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        ARTIFACTORY_TOKEN = credentials('ARTIFACTORY_TOKEN')
        TF_VAR_offline_remote_password = credentials('ARTIFACTORY_TOKEN')
        REDHAT_USERNAME = credentials('REDHAT_USERNAME')
        REDHAT_PASSWORD = credentials('REDHAT_PASSWORD')
        FVD_USERNAME = credentials('FVD_USERNAME')
        FVD_PASSWORD = credentials('FVD_PASSWORD')


        //Env constants
        FUNCTIONAL_TEST_REPO = "icp-sanity-bats"
        TERRAFORM_VER = "0.11.13"
        //TARGET = "deploy-power-powervc"
        TEST_SUITE = "ppc64le-edge"
        OS = "linux"
        OS_IDENTITY_API_VERSION='3'
        OS_TENANT_NAME="icp-test"
        OS_USER_DOMAIN_NAME="default"
        OS_PROJECT_DOMAIN_NAME="Default"
        OS_COMPUTE_API_VERSION=2.37
        OS_NETWORK_API_VERSION=2.0
        OS_IMAGE_API_VERSION=2
        OS_VOLUME_API_VERSION=2
        
        

        VCPUS_REQ_MASTER = "${params.VcpusMaster}"
        MEM_REQ_MASTER = "${params.MemMaster}"
        PRO_UNIT_REQ_MASTER = "${params.ProUnitMaster}"
        VCPUS_REQ_WORKER = "${params.VcpusWorker}"
        MEM_REQ_WORKER = "${params.MemWorker}"
        PRO_UNIT_REQ_WORKER = "${params.ProUnitWorker}"
        STORAGE = "${params.StorageType}"
        ROOK_DISK_SIZE = "${params.RookSize}"
        BUILD_DIR = "${params.BuildDir  }"
        OFFLINE_TARBALL_URL = "${params.OfflineImage}"


        MASTER_TEMPLATE = "${env.BUILD_TAG}" + "-" + "master"
        MANAGER_TEMPLATE = "${env.BUILD_TAG}" + "-" + "master"
        WORKER_TEMPLATE = "${env.BUILD_TAG}" + "-" + "worker"
        VA_TEMPLATE = "${env.BUILD_TAG}" + "-" + "master"
        PROXY_TEMPLATE = "${env.BUILD_TAG}" + "-" + "worker"
        //GLUSTER_TEMPLATE = "${env.BUILD_TAG}" + "-" + "worker"

        VIR_CHOSE = "${params.Virtualization}"
        HARDWARE_CHOSE = "${params.Hardware}"
        DISTRO_CHOSE = "${params.Operatingsystem}"
        DEPLOY_REPO = "${params.Repo}"
        ICP_VERSION = "${params.Version}"
        ICP_FIXPACK = ""
        ICP_EDITION = ""
        OFFLINE_TARBALL = "${params.Package}"
        BUILD_TYPE = "${params.Build}"
        ICP_ADDITIONAL_CONFIG = "${params.ICPConfig}"
        SERVER_CONFIG = "${params.ServerConfig}"

        VA = "${params.DeployVA == true ? "vulnerability-advisor"  : ""}"
        //ISTIO = "${params.EnableIstio == true ? "enabled"  : "disabled"}"
        MCM_END = "${params.EnableMCM == true ? "multicluster-endpoint"  : ""}"
        MCM_HUB = "${params.EnableMCM == true ? "multicluster-hub"  : ""}"
        MONITORING = "${params.EnableMonitoring == true ? "monitoring"  : ""}"
        LOGGING = "${params.EnableLogging == true ? "logging"  : ""}"
        SKIP_ICP_INSTALL = "${params.DeployICP == true ? "false"  : "true"}"
        //NPDD = "${params.EnableNodeProblemDetector == true ? "enabled"  : "disabled"}"
        //PSN = "${params.EnablePlatformSecurity == true ? "enabled"  : "disabled"}"
        //MINIO = "${params.EnableStorageMinio == true ? "enabled"  : "disabled"}"
        //KNATIVE = "${params.EnableKnative == true ? "enabled"  : "disabled"}"
        //GLUSTER_FS = "${params.EnableGluster == true ? "enabled"  : "disabled"}"
        //SYSTEM_TUNING = "${params.SystemTuning == true ? "enabled"  : "disabled"}"

        ENABLED_MANAGEMENT_SERVICES = "${VA}" + " " + "${MCM_END}" + " " + "${MCM_HUB}" + " " + "${MONITORING}" + " " + "${LOGGING}"

        boolean CREATE_STORAGE = "${params.EnableGluster == true ? "true"  : "false"}"

        //boolean ENABLE_KMS = "${params.EnableKmsPlugin}"
        NUM_OF_WORKERS = "${params.DeployWorker == true ? params.NumOfWorkers : 0}"
        NUM_OF_MASTERS = "${params.DeployMaster == true ? params.NumOfMasters : 0}"
        NUM_OF_MANAGERS = "${params.DeployManager == true ? params.NumOfManagers : 0}"
        NUM_OF_PROXIES = "${params.DeployProxy == true ? params.NumOfProxies : 0}"
        //NUM_OF_GLUSTERS = "${params.EnableGluster == true ? params.NumOfGlusters : 0}"
        NUM_OF_VA = "${params.DeployVA == true ? 1 : 0}"

        TARGET = "${params.Build == 'Online' ? "deploy-openshift-powervc" : "deploy-openshift-powervc-offline"}"

        
        TIMEOUT = "${params.KeepFor}"
        OS_NETWORK = "${params.Network}"
        OS_PRIVATE_NETWORK = "${params.Network}"
        TERMPLATE_FILE = ".${TARGET}.tfvars.template"
        OFFLINE_REPO = "https://na.artifactory.swg-devops.com/artifactory/hyc-cloud-private-${DEPLOY_REPO}-generic-local/${BUILD_TYPE}/"
        OCP_ENV = true
        IMAGE_FILTER = "${OCP_ENV == true ? "openshift" : "cicd"}"
        ICP_CONFIG_FILE="power.openshift.config.yaml"
        ICP_INSTALLER_TAG="${ICP_VERSION}"
        REDHAT_RELEASE = "7.6"

        //To pick build-harness . Remove once the Makefile.openshift_pvc upstreamed
        //BUILD_HARNESS_ORG="sudeeshjohn"
	 }

    stages {
        //Checkout the installer git repo
        stage('Prepare Teraform Template') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    wrap([$class: 'BuildUser']) {
                        env.INSTANCE_NAME = "${BUILD_USER_FIRST_NAME}"
                        env.INSTANCE_NAME = env.INSTANCE_NAME.toLowerCase()
                    }
                    if (params.OfflineImage.contains("mcm")){
                        env.INCEPTION_IMAGE = "mcm-inception-ppc64le"
                    }
                    else{
                        env.INCEPTION_IMAGE = "icp-inception-ppc64le"
                    }
                    try
                    {
                        MEM_WORKER_GB = MEM_REQ_WORKER.toInteger()
                        MEM_REQ_WORKER_MB = MEM_WORKER_GB * 1024

                        MEM_MASTER_GB = MEM_REQ_MASTER.toInteger()
                        MEM_REQ_MASTER_MB = MEM_MASTER_GB * 1024
                        
                        if (env.DEPLOY_MASTER == "false")
                        {
                            echo "Cluster cant deploy without master"
                            throw err

                        }
                        if ( env.VIR_CHOSE == "KVM" )
                        {   
                            echo 'Setting-up terraform template file for KVM!'
                            env.AUTH_URL=sh(returnStdout: true, script: "grep AUTH_URL conf/infra/kvm.conf|awk 'BEGIN{FS=\"AUTH_URL=\"}{print \$2}'|tr '\n' ' '").trim()
                            env.AVAILABILITY_ZONE=getZone(env.VIR_CHOSE, HARDWARE_CHOSE )
                            if ("${AVAILABILITY_ZONE}" == null)
                            {
                                echo "Requested zone could not find in ${env.AUTH_URL}"
                                error('Requested zone could not find')
                            }
                            env.OS_IMAGE=getTheImage(env.AUTH_URL, env.DISTRO_CHOSE, env.IMAGE_FILTER )
                            env.IMAGE_DISTRO = "${env.DISTRO}"
                            if ("${IMAGE}" == "")
                            {
                                echo "Requested image could not find in ${env.AUTH_URL}"
                                error('Requested image could not find')
                            }
                            status=createTemplate(env.AUTH_URL, env.VCPUS_REQ_MASTER, "${MEM_REQ_MASTER_MB}", env.PRO_UNIT_REQ_MASTER, env.MASTER_TEMPLATE)
                            if ( status != 0)
                            {
                                echo "Unable to create template ${env.MASTER_TEMPLATE}"
                            }
                            status=createTemplate(env.AUTH_URL, VCPUS_REQ_WORKER, "${MEM_REQ_WORKER_MB}", PRO_UNIT_REQ_WORKER, WORKER_TEMPLATE)
                            if ( status != 0)
                            {
                                echo "Unable to create template ${env.WORKER_TEMPLATE}"
                            }                        
                        } 
                        else if ( env.VIR_CHOSE == "PowerVM" )
                        {
                            echo 'Setting-up terraform template file for PowerVM!'
                            env.AUTH_URL=sh(returnStdout: true, script: "grep AUTH_URL conf/infra/pvm.conf|awk 'BEGIN{FS=\"AUTH_URL=\"}{print \$2}'|tr '\n' ' '").trim()
                            env.AVAILABILITY_ZONE=getZone(env.VIR_CHOSE, HARDWARE_CHOSE )
                            if ("${AVAILABILITY_ZONE}" == null)
                            {
                                echo "Requested zone could not find in ${AUTH_URL}"
                                error('Could not find requesed zone')
                            }
                            env.OS_IMAGE=getTheImage(env.AUTH_URL, env.DISTRO_CHOSE, env.IMAGE_FILTER )
                            env.IMAGE_DISTRO = "${env.DISTRO}"
                            if ("${IMAGE}" == "")
                            {
                                echo "Requested image could not find in ${AUTH_URL}"
                                error('Could not find requesed image')

                            }
                            status=createTemplate(env.AUTH_URL, env.VCPUS_REQ_MASTER, "${MEM_REQ_MASTER_MB}", env.PRO_UNIT_REQ_MASTER, env.MASTER_TEMPLATE)
                            if ( status != 0)
                            {
                                echo "Unable to create template ${env.MASTER_TEMPLATE}"
                            }
                            status=createTemplate(env.AUTH_URL, VCPUS_REQ_WORKER, "${MEM_REQ_WORKER_MB}", PRO_UNIT_REQ_WORKER, WORKER_TEMPLATE)
                            if ( status != 0)
                            {
                                echo "Unable to create template ${env.WORKER_TEMPLATE}"
                            }    
                        }
                    }
                    catch (err) 
                    {
                        echo 'Error ! Template prepration failed !'
                        getArtifactsAndClean(env.AUTH_URL)
                        throw err
                    }
                }
            }
        }
        stage('Initilize Environment') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                        echo 'Initializing supporting repos and keys !'

                        cd ${WORKSPACE}/deploy
                        make init
                        make keys
                        make setup-dependencies
                        '''
                        }
                    catch (err) {
                        echo 'Error ! ENV setup failed!'
                        getArtifactsAndClean(env.AUTH_URL)
                        throw err
                    }
                }
            }
        }
        stage('Deploy ICP Cluster') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                        echo 'Deploying Cluster!'
                        export TF_VAR_offline_remote_password=$TF_VAR_password
                        cd ${WORKSPACE}/deploy
                        make $TARGET
                        sleep 60
                        '''
                        }
                    catch (err) {
                        echo 'Error ! Tearing off the cluster !'
                        //getArtifactsAndClean(env.AUTH_URL)
                        //throw err
                    }
                }
            }
        }
        stage('Setup Cloudctl') {
            when {
                    expression {
                        return env.SKIP_ICP_INSTALL != "true";
                    }
                }
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                        echo 'Setting up the cloudctl!'

                        cd ${WORKSPACE}/deploy
                        make $TARGET:config
                        '''
                        }
                    catch (err) {
                        echo 'Error ! Tearing off the cluster !'
                        //getArtifactsAndClean(env.AUTH_URL)
                        //throw err
                    }
                }
            }
        }
        stage('Waiting to timeout') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        TIMEOUT_MIN = TIMEOUT.toInteger()
                        if ( TIMEOUT_MIN != 0 )
                        {
                            TIMEOUT_SEC=TIMEOUT_MIN*60
                        }
                        echo "HOLDING THE CLUSTER TEAR DOWN FOR ${TIMEOUT_MIN} MINUTES"
                        sleep TIMEOUT_SEC
                        }
                    finally {
                        getArtifactsAndClean(env.AUTH_URL)
                    }
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts allowEmptyArchive: true, artifacts: 'deploy/systeminfo.txt.tar.gz', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: 'deploy/cluster.tar.gz', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: 'deploy/cluster/config.yaml', fingerprint: true, onlyIfSuccessful: false           
            archiveArtifacts allowEmptyArchive: true, artifacts: 'deploy/powervc.tfvars', fingerprint: true, onlyIfSuccessful: false
            cleanWs()
            //notifyBySlack(currentBuild.result, '#cloud-ci', 'cloud-ci')
        }
    }
}
