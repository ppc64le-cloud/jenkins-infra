@Library('pcloud-jenkins-library') _

//Get Infra and OS from user
properties([
    parameters([
        [$class: 'ChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select the Type of OpenShift Build',
            filterLength: 1,
            filterable: false,
            name: 'OCPBuild',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return[\'Could not get Env\']'
                ],
                script: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return["Nightly:selected","Released"]'
                ]
            ]
        ],

        [$class: 'ChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select the OpenShift Release',
            filterLength: 1,
            filterable: false,
            name: 'Release',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return[\'Could not get Env\']'
                ],
                script: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return["4.3:selected","4.4","4.5","4.6", "4.7"]'
                ]
            ]
        ],

        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select the OpenShift Build',
            filterLength: 1,
            filterable: false,
            name: 'Build',
            referencedParameters: 'OCPBuild, Release',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return[\'Could not get Environment from Env Param\']'
                ],
                script: [
                    classpath: [],
                    sandbox: false,
                    script:
                        '''
                        if (OCPBuild.equals("Nightly")) {
                            def command = """ wget  --output-document  -  https://openshift-release-ppc64le.svc.ci.openshift.org/"""
                            build = command.execute().text
                            def min1 = ~/<a class="text-success" href="/
                            def min2 = ~/\\[/
                            def min3 = ~/\\]/
                            def min4 = ~/<a.*">/
                            def min5 = ~/<\\/a><\\/td>/
                            def ls =''
                            build.eachLine{
                                if (it =~ /<td/) {
                                    String lst = it.findAll(/<a class="text-success" href=".*/)
                                    if (lst.contains (Release)) {
                                        if (lst.contains("nightly")){
                                            ls = ls + " " + (lst - min4)
                                            ls = ls - min5
                                            ls = ls - min2
                                            ls = ls - min3
                                        }
                                    }

                                }
                            }
                            bld = ls.split() as List
                            bld = bld.sort()
                            bld = bld.reverse()
                            return bld
                        }
                        else if (OCPBuild.equals("Released")) {
                            def command = """ wget  --output-document  -  https://openshift-release-ppc64le.svc.ci.openshift.org/"""
                            build = command.execute().text
                            def min1 = ~/<a class="text-success" href="/
                            def min2 = ~/\\[/
                            def min3 = ~/\\]/
                            def min4 = ~/<a.*">/
                            def min5 = ~/<\\/a><\\/td>/
                            def ls =''
                            build.eachLine{
                                if (it =~ /<td/) {
                                    String lst = it.findAll(/<a class="text-success" href=".*/)
                                    if (lst.contains (Release)) {
                                        if ( ! lst.contains("nightly")){
                                            ls = ls + " " + (lst - min4)
                                            ls = ls - min5
                                            ls = ls - min2
                                            ls = ls - min3
                                        }
                                    }

                                }
                            }
                            bld = ls.split() as List
                            bld = bld.sort()
                            bld = bld.reverse()
                            return bld
                        
                        }
                        else
                        {
                            return["NOT REQUIRED"]
                        }
                        '''
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select the Type of OpenShift Build',
            filterLength: 1,
            filterable: false,
            name: 'OCPBuildUpgrade',
            referencedParameters: 'e2eUpgrade',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return[\'Could not get Env\']'
                ],
                script: [
                    classpath: [],
                    sandbox: false,
                    script:
                    '''
                    if (e2eUpgrade) {
                        return["Nightly:selected","Released"]
                        }
                        else {
                            return[\'NOT REQUIRED\']
                        }

                    '''
                ]
            ]
        ],

        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select the OpenShift Release to which the cluster to be upgraded',
            filterLength: 1,
            filterable: false,
            name: 'ReleaseUpgrade',
            referencedParameters: 'e2eUpgrade',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return[\'Could not get Env\']'
                ],
                script: [
                    classpath: [],
                    sandbox: false,
                    script:
                    '''
                    if (e2eUpgrade) {
                        return["4.3","4.4:selected","4.5","4.6", "4.7"]
                    }
                    else {
                            return[\'NOT REQUIRED\']
                    }
                    '''
                ]
            ]
        ],

        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select the OpenShift Build to which the cluster to be Upgraded',
            filterLength: 1,
            filterable: false,
            name: 'BuildUpgrade',
            referencedParameters: 'OCPBuildUpgrade, ReleaseUpgrade, e2eUpgrade',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return[\'Could not get Environment from Env Param\']'
                ],
                script: [
                    classpath: [],
                    sandbox: false,
                    script:
                        '''
                        if (e2eUpgrade) {
                            if (OCPBuildUpgrade.equals("Nightly")) {
                                def command = """ wget  --output-document  -  https://openshift-release-ppc64le.svc.ci.openshift.org/"""
                                build = command.execute().text
                                def min1 = ~/<a class="text-success" href="/
                                def min2 = ~/\\[/
                                def min3 = ~/\\]/
                                def min4 = ~/<a.*">/
                                def min5 = ~/<\\/a><\\/td>/
                                def ls =''
                                build.eachLine{
                                    if (it =~ /<td/) {
                                        String lst = it.findAll(/<a class="text-success" href=".*/)
                                        if (lst.contains (ReleaseUpgrade)) {
                                            if (lst.contains("nightly")){
                                                ls = ls + " " + (lst - min4)
                                                ls = ls - min5
                                                ls = ls - min2
                                                ls = ls - min3
                                            }
                                        }

                                    }
                                }
                                bld = ls.split() as List
                                bld = bld.sort()
                                bld = bld.reverse()
                                return bld
                            }
                            else if (OCPBuildUpgrade.equals("Released")) {
                                def command = """ wget  --output-document  -  https://openshift-release-ppc64le.svc.ci.openshift.org/"""
                                build = command.execute().text
                                def min1 = ~/<a class="text-success" href="/
                                def min2 = ~/\\[/
                                def min3 = ~/\\]/
                                def min4 = ~/<a.*">/
                                def min5 = ~/<\\/a><\\/td>/
                                def ls =''
                                build.eachLine{
                                    if (it =~ /<td/) {
                                        String lst = it.findAll(/<a class="text-success" href=".*/)
                                        if (lst.contains (ReleaseUpgrade)) {
                                            if ( ! lst.contains("nightly")){
                                                ls = ls + " " + (lst - min4)
                                                ls = ls - min5
                                                ls = ls - min2
                                                ls = ls - min3
                                            }
                                        }

                                    }
                                }
                                bld = ls.split() as List
                                bld = bld.sort()
                                bld = bld.reverse()
                                return bld
                            }
                            else
                            {
                                return["NOT REQUIRED"]
                            }
                        }
                        else {
                            return[\'NOT REQUIRED\']
                        }
                        '''
                ]
            ]
        ],
        [$class: 'ChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select the Virtualization environment from the Dropdown List',
            filterLength: 1,
            filterable: false,
            name: 'Virtualization',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return[\'Could not get Env\']'
                ],
                script: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return["PowerVM"]'
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select the Server type from the Dropdown List',
            filterLength: 1,
            filterable: false,
            name: 'Hardware',
            referencedParameters: 'Virtualization',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return[\'Could not get Environment from Env Param\']'
                ],
                script: [
                    classpath: [],
                    sandbox: false,
                    script:
                        ''' if(Virtualization.equals("PowerVM")){
                                return["P8:selected","P9"]
                            }
                        '''
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select the RHCOS image needed from the Dropdown List',
            filterLength: 1,
            filterable: false,
            name: 'rhcos',
            referencedParameters: 'Release',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return[\'Could not get Environment from Env Param\']'
                ],
                script: [
                    classpath: [],
                    sandbox: false,
                    script:
                        ''' import groovy.util.XmlSlurper
                            import java.util.Map
                            import jenkins.*
                            import jenkins.model.*
                            import hudson.*
                            import hudson.model.*
                            def ls =''

                            try{
                                def jenkins = Jenkins.instance
                                def item = jenkins.getItemByFullName("poll-powervc-images")
                                println item
                                last_sucessful_build_number=item.getLastSuccessfulBuild().getNumber()
                                println last_sucessful_build_number
                                def file = new File("/var/lib/jenkins/jobs/poll-powervc-images"+ "/builds/" + last_sucessful_build_number.toInteger() + "/archive/" +"rhcos-${Release}.txt")
                                file.eachLine{
                                if (it.contains ("rhcos")) {
                                    ls = ls + " " + it
                                }
                            }
                            bld = ls.split() as List
                            return bld
                            } catch (Exception ex){
                                println ex.message
                            }

                        '''
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select the Bastion OS from the Dropdown List',
            filterLength: 1,
            filterable: false,
            name: 'BastionOs',
            referencedParameters: 'Release',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return[\'Could not get Environment from Env Param\']'
                ],
                script: [
                    classpath: [],
                    sandbox: false,
                    script:
                        ''' return["RHEL8.0:selected","RHEL8.1"]
                        '''
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select the network from the Dropdown List(preferably icp_network2..(icp_network:181(VLAN=2079))icp_network1:64(VLAND:2230))',
            filterLength: 1,
            filterable: false,
            name: 'Network',
            referencedParameters: 'Virtualization',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script: 
                        'return[\'Could not get Environment from Env Param\']'
                ],
                script: [
                    classpath: [],
                    sandbox: false,
                    script:
                        ''' if (Virtualization.equals("KVM")){
                                return["icp_network"]
                            }
                            else if(Virtualization.equals("PowerVM")){
                                return["icp_network2:selected", "icp_network1", "icp_network"]
                            }
                        '''
                ]
            ]
        ]
    ])
])
//Define global variables
env.DISTRO = ""
def TIMEOUT_SEC
def TIMEOUT_MIN
def E2E_SUMMARY

pipeline {
    agent {
        dockerfile {
            dir 'images/terraform'
            additionalBuildArgs '--force-rm	--no-cache'
            args '-v /etc/resolv.conf:/etc/resolv.conf'
            label 'daily-x86_64'
        }
    }
    parameters {
        string(defaultValue: '1', description: 'Required Number of VCPUs', name: 'VcpusMaster')
        string(defaultValue: '16', description: 'Required amount Memory', name: 'MemMaster')
        string(defaultValue: '.2', description: 'Required Processing Units Specify a value of processor units that is not greater than the value of virtual processors or less than five percent of the value of virtual processors.', name: 'ProUnitMaster')
        booleanParam(defaultValue: true, name: 'DeployMaster', description: 'Select if you want to Deploy Master node')
        string(defaultValue: '3', description: 'Enter Number of Masters needed', name: 'NumOfMasters')

        booleanParam(defaultValue: true, name: 'DeployWorker', description: 'Select if you want to Deploy Worker node')
        string(defaultValue: '2', description: 'Required Number of VCPUs(worker, gluster, proxy)', name: 'VcpusWorker')
        string(defaultValue: '8', description: 'Required amount Memory(worker, gluster, proxy)', name: 'MemWorker')
        string(defaultValue: '.2', description: 'Required Processing Units Specify a value of processor units that is not greater than the value of virtual processors or less than five percent of the value of virtual processors.', name: 'ProUnitWorker')
        string(defaultValue: '1', description: 'Enter Number of workers needed', name: 'NumOfWorkers')

        string(defaultValue: '0', description: 'Enter time(in Minutes) to retain the cluster', name: 'KeepFor')
        string(defaultValue: '', description: 'Enter Registry link for the OCP Build. This will override the Build', name: 'Ocpimage')
        booleanParam(defaultValue: false, name: 'Rune2e', description: 'Select if you want to run e2e tests. e2e runs before upgrade, if e2eUpgrade is enabled')
        booleanParam(defaultValue: false, name: 'e2eUpgrade', description: 'Select if you want to run e2eUpgrade')
        booleanParam(defaultValue: false, name: 'DeployCS', description: 'Select if you want to install Common Services')
        booleanParam(defaultValue: false, name: 'RunAcmeair', description: 'Select if you want to run Acmeair deployment')


    }
    environment {
        //users and credentials. All must be defined in Jenkins Credentials
        GITHUB_USER = credentials('GITHUB_USER')
        TF_VAR_user_name = credentials('GITHUB_USER')
        DOCKER_USER = credentials('DOCKER_USER')
        ARTIFACTORY_USER = credentials('ARTIFACTORY_USER')
        TF_VAR_repo_user = credentials('GITHUB_USER')
        TF_VAR_password = credentials('TF_VAR_password')
        OS_USERNAME = credentials('GITHUB_USER')
        OS_PASSWORD = credentials('TF_VAR_password')
        OS_INSECURE = true
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        ARTIFACTORY_TOKEN = credentials('ARTIFACTORY_TOKEN')
        TF_VAR_offline_remote_password = credentials('ARTIFACTORY_TOKEN')
        REDHAT_USERNAME = credentials('REDHAT_USERNAME')
        REDHAT_PASSWORD = credentials('REDHAT_PASSWORD')
        FVD_USERNAME = credentials('FVD_USERNAME')
        FVD_PASSWORD = credentials('FVD_PASSWORD')


        //Env constants
        TERRAFORM_VER = "0.12.13"
        TEST_SUITE = "ppc64le-edge"
        OS = "linux"
        OS_IDENTITY_API_VERSION='3'
        OS_TENANT_NAME="icp-test"
        OS_USER_DOMAIN_NAME="default"
        OS_PROJECT_DOMAIN_NAME="Default"
        OS_COMPUTE_API_VERSION=2.37
        OS_NETWORK_API_VERSION=2.0
        OS_IMAGE_API_VERSION=2
        OS_VOLUME_API_VERSION=2



        VCPUS_REQ_MASTER = "${params.VcpusMaster}"
        MEM_REQ_MASTER = "${params.MemMaster}"
        PRO_UNIT_REQ_MASTER = "${params.ProUnitMaster}"
        VCPUS_REQ_WORKER = "${params.VcpusWorker}"
        MEM_REQ_WORKER = "${params.MemWorker}"
        PRO_UNIT_REQ_WORKER = "${params.ProUnitWorker}"
        //OPENSHIFT_IMAGE = "sys-powercloud-docker-local.artifactory.swg-devops.com/ocp-ppc64le/release-ppc64le:${params.Build}"
        ENABLE_E2E_TEST = "${params.Rune2e}"
        CS_INSTALL = "${params.DeployCS}"
        RUN_ACMEAIR = "${params.RunAcmeair}"
        RHCOS_IMAGE_NAME="${params.rhcos}"
        OCP_RELEASE="${params.Release}"
        ENABLE_E2E_UPGRADE = "${params.e2eUpgrade}"
        OPENSHIFT_UPGRADE_IMAGE = "${params.BuildUpgrade}"
        

        VCPUS_REQ_BASTION = "1"
        MEM_REQ_BASTION = "8"
        PRO_UNIT_REQ_BASTION = ".1"
        VCPUS_REQ_BOOTSTRAP = "4"
        MEM_REQ_BOOTSTRAP = "16"
        PRO_UNIT_REQ_BOOTSTRAP = ".4"

        MASTER_TEMPLATE = "${env.BUILD_TAG}" + "-" + "master"
        WORKER_TEMPLATE = "${env.BUILD_TAG}" + "-" + "worker"
        BOOTSTRAP_TEMPLATE = "${env.BUILD_TAG}" + "-" + "bootstrap"
        BASTION_TEMPLATE = "${env.BUILD_TAG}" + "-" + "bastion"


        VIR_CHOSE = "${params.Virtualization}"
        HARDWARE_CHOSE = "${params.Hardware}"
        NODE_OS = "${params.rhcos}"
        BASTION_OS  = "${params.BastionOs}"
        TIMEOUT = "${params.KeepFor}"
        OS_NETWORK = "${params.Network}"
        OS_PRIVATE_NETWORK = "${params.Network}"

        //Makefile variables
        TERRAFORM_FORCE_KEYPAIR_CREATION = "0" //For not using build-barnes
        OPENSHIFT_POWERVC_GIT_TF_DEPLOY_BRANCH="release-4.3" //The downlod branch

        NUM_OF_WORKERS = "${params.DeployWorker == true ? params.NumOfWorkers : 0}"
        NUM_OF_MASTERS = "${params.DeployMaster == true ? params.NumOfMasters : 0}"

        TARGET = "deploy-openshift4-powervc"
        TERMPLATE_FILE = ".${TARGET}.tfvars.template"
        //OPENSHIFT_INSTALL_TARBALL = "https://mirror.openshift.com/pub/openshift-v4/ppc64le/clients/ocp-dev-preview/4.3.0-0.nightly-ppc64le-2020-02-20-212303/openshift-install-linux-4.3.0-0.nightly-ppc64le-2020-02-20-212303.tar.gz"

        REDHAT_RELEASE = "7.6"
        RHEL_USERNAME = "root"
        PULL_SECRET_FILE = "data/pull-secret.txt"
        CLUSTER_DOMAIN = "redhat.com"
        E2E_GIT = "https://github.com/openshift/origin"
        E2E_BRANCH="release-${OCP_RELEASE}"
        E2E_EXCLUDE_LIST = '-H \\\\\\\\\\"Authorization: token ${GITHUB_TOKEN}\\\\\\\\\\" -H \\\\\\\\\\"Accept: application/vnd.github.v3.raw\\\\\\\\\\" \\\\\\\\\\"https://raw.github.ibm.com/redstack-power/e2e-exclude-list/${OCP_RELEASE}-powervm/ocp${OCP_RELEASE}_power_blacklist.txt\\\\\\\\\\"'
        ENABLE_SCALE_TEST = "false"

        OCP4_ENV = true
        //IMAGE_FILTER = "${OCP_ENV == true ? "openshift" : "cicd"}"

        //To pick build-harness . Remove once the Makefile.openshift_pvc upstreamed
        BUILD_HARNESS_ORG="sudeeshjohn"
	 }

    stages {
        //Checkout the installer git repo
        stage('Prepare Teraform Template') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    wrap([$class: 'BuildUser']) {
                        env.INSTANCE_NAME = "${BUILD_USER_FIRST_NAME}"
                        env.INSTANCE_NAME = env.INSTANCE_NAME.toLowerCase()
                    }
                    try
                    {
                        MEM_WORKER_GB = MEM_REQ_WORKER.toInteger()
                        MEM_REQ_WORKER_MB = MEM_WORKER_GB * 1024

                        MEM_MASTER_GB = MEM_REQ_MASTER.toInteger()
                        MEM_REQ_MASTER_MB = MEM_MASTER_GB * 1024

                        MEM_BASTION_GB = MEM_REQ_BASTION.toInteger()
                        MEM_REQ_BASTION_MB = MEM_BASTION_GB * 1024

                        MEM_BOOTSTRAP_GB = MEM_REQ_BOOTSTRAP.toInteger()
                        MEM_REQ_BOOTSTRAP_MB = MEM_BOOTSTRAP_GB * 1024

                        if (params.Ocpimage == "")
                        {
                            env.OPENSHIFT_IMAGE = "sys-powercloud-docker-local.artifactory.swg-devops.com/ocp-ppc64le/release-ppc64le:${params.Build}"
                        }
                        else
                        {
                            env.OPENSHIFT_IMAGE = "${params.Ocpimage}"
                        }
                        if (env.DEPLOY_MASTER == "false")
                        {
                            echo "Cluster cant deploy without master"
                            throw err

                        }
                        echo env.OPENSHIFT_IMAGE
                        if ( env.VIR_CHOSE == "KVM" )
                        {
                            echo 'Setting-up terraform template file for KVM!'
                            env.AUTH_URL=sh(returnStdout: true, script: "grep AUTH_URL conf/infra/kvm.conf|awk 'BEGIN{FS=\"AUTH_URL=\"}{print \$2}'|tr '\n' ' '").trim()
                        }
                        else if ( env.VIR_CHOSE == "PowerVM" )
                        {
                            echo 'Setting-up terraform template file for PowerVM!'
                            env.AUTH_URL=sh(returnStdout: true, script: "grep AUTH_URL conf/infra/pvm.conf|awk 'BEGIN{FS=\"AUTH_URL=\"}{print \$2}'|tr '\n' ' '").trim()
                        }
                        env.OPENSHIFT_INSTALL_TARBALL=getOpenshiftBuild(OCP_RELEASE)
                        if ("${env.OPENSHIFT_INSTALL_TARBALL}" == "null" )
                        {
                            echo "Unable to find openshift install tarball. falling back to default"
                            env.OPENSHIFT_INSTALL_TARBALL="https://mirror.openshift.com/pub/openshift-v4/ppc64le/clients/ocp-dev-preview/4.5.0-0.nightly-ppc64le-2020-07-13-172606/openshift-install-linux.tar.gz"
                        }
                        env.OPENSHIFT_CLIENT_TARBALL=getOpenshiftClient(OCP_RELEASE)
                        env.AVAILABILITY_ZONE=getZone(env.VIR_CHOSE, HARDWARE_CHOSE )
                        env.OPENSHIFT_CLIENT_TARBALL_AMD64=getOpenshiftClientAMD(OCP_RELEASE)
                        if ("${AVAILABILITY_ZONE}" == null)
                        {
                            echo "Requested zone could not find in ${AUTH_URL}"
                            error('Could not find requesed zone')
                        }
                        env.BASTION_IMAGE_NAME=getTheImage(env.AUTH_URL, env.BASTION_OS, env.IMAGE_FILTER )
                        env.IMAGE_DISTRO = "${env.DISTRO}"
                        env.BASTION_IMAGE_ID = getTheImageId(env.AUTH_URL, env.BASTION_IMAGE_NAME)
                        if ("${BASTION_IMAGE_ID}" == "")
                        {
                            echo "Requested image could not find in ${env.AUTH_URL}"
                            error('Requested image could not find')
                        }
                        env.RHCOS_IMAGE_ID = getTheImageId(env.AUTH_URL, RHCOS_IMAGE_NAME)
                        if ("${RHCOS_IMAGE_ID}" == "")
                        {
                            echo "Requested image could not find in ${env.AUTH_URL}"
                            error('Requested image could not find')
                        }
                        status=createTemplate(env.AUTH_URL, env.VCPUS_REQ_MASTER, "${MEM_REQ_MASTER_MB}", env.PRO_UNIT_REQ_MASTER, env.MASTER_TEMPLATE)
                        if ( status != 0)
                        {
                            echo "Unable to create template ${env.MASTER_TEMPLATE}"
                        }
                        status=createTemplate(env.AUTH_URL, VCPUS_REQ_WORKER, "${MEM_REQ_WORKER_MB}", PRO_UNIT_REQ_WORKER, WORKER_TEMPLATE)
                        if ( status != 0)
                        {
                            echo "Unable to create template ${env.WORKER_TEMPLATE}"
                        }
                        status=createTemplate(env.AUTH_URL, env.VCPUS_REQ_BASTION, "${MEM_REQ_BASTION_MB}", env.PRO_UNIT_REQ_BASTION, env.BASTION_TEMPLATE)
                        if ( status != 0)
                        {
                            echo "Unable to create template ${env.BASTION_TEMPLATE}"
                        }
                        status=createTemplate(env.AUTH_URL, env.VCPUS_REQ_BOOTSTRAP, "${MEM_REQ_BOOTSTRAP_MB}", env.PRO_UNIT_REQ_BOOTSTRAP, env.BOOTSTRAP_TEMPLATE)
                        if ( status != 0)
                        {
                            echo "Unable to create template ${env.BOOTSTRAP_TEMPLATE}"
                        }
                    }
                    catch (err)
                    {
                        echo 'Error ! Template prepration failed !'
                        getArtifactsAndCleanOcp4(env.AUTH_URL)
                        throw err
                    }
                }
            }
        }
        stage('Initilize Environment') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                        echo 'Initializing supporting repos and keys !'

                        cd ${WORKSPACE}/deploy
                        make init
                        make keys
                        make setup-dependencies
                        '''
                        }
                    catch (err) {
                        echo 'Error ! ENV setup failed!'
                        getArtifactsAndCleanOcp4(env.AUTH_URL)
                        throw err
                    }
                }
            }
        }
        stage('Deploy OCP Cluster') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                        echo 'Deploying Cluster!'
                        export TF_VAR_offline_remote_password=$TF_VAR_password
                        cd ${WORKSPACE}/deploy
                        make $TARGET
                        sleep 60
                        '''
                        }
                    catch (err) {
                        echo 'Error ! Tearing off the cluster !'
                        //getArtifactsAndCleanOcp4(env.AUTH_URL)
                        //throw err
                    }
                }
            }
        }

        stage('Setup Kubectl') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        setupKubeconfigOcp4()
                        sh '''
                        echo 'Setting up kubectl!'
                        oc get nodes
                        echo 'Get the Cluster Operators'
                        oc get co
                        '''
                        }
                    catch (err) {
                        echo 'Error ! Tearing off the cluster !'
                        getArtifactsAndCleanOcp4(env.AUTH_URL)
                        throw err
                    }
                }
            }
        }

        stage('Clone and Run Acmeair'){
            when {
                expression {
                          return env.RUN_ACMEAIR == "true";
                }
            }
            steps{
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                         // Run the script for Acmeair installation
                         sh '''
                         TAG="ppc64le"
                         git clone https://${GITHUB_TOKEN}@github.ibm.com/powercloud/acmeair.git
                         cd acmeair
                         git checkout ${TAG}
                         ./deploy.sh

                         echo "Acmeair deployed resources"
                         oc get all
                         total_pods_created=`oc get pods|tail -n +2|wc -l`
                         #Time to get the pods deployment in running state
                         timeout=300
                         time_taken=0
                         #Pods Verification
                         while [ "$time_taken" -le "$timeout" ]
                         do
                              actual_pods_running=`oc get pods|grep -i "running"|wc -l`
                              if [ "$total_pods_created" -eq "$actual_pods_running" ];then
                                  break
                              else
                                  time_taken=`expr $time_taken + 60`
                                  sleep 60
                              fi
                         done
                         echo "Total pods in running state $actual_pods_running out of $total_pods_created"
                         oc get pods
                         '''
                        }
                    catch (err) {
                        echo 'Error ! Tearing off the cluster. Failed to install acmeair !'
                        getArtifactsAndCleanOcp4(env.AUTH_URL)
                        throw err
                    }
                }
            }
        }

        stage('Waiting to timeout') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        TIMEOUT_MIN = TIMEOUT.toInteger()
                        if ( TIMEOUT_MIN != 0 )
                        {
                            TIMEOUT_SEC=TIMEOUT_MIN*60
                        }
                        echo "HOLDING THE CLUSTER TEAR DOWN FOR ${TIMEOUT_MIN} MINUTES"
                        sleep TIMEOUT_SEC
                        }
                    finally {
                        getArtifactsAndCleanOcp4(env.AUTH_URL)
                    }
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts allowEmptyArchive: true, artifacts: 'deploy/conformance-parallel-out.txt.tar.gz', fingerprint: true, onlyIfSuccessful: true
            archiveArtifacts allowEmptyArchive: true, artifacts: 'deploy/summary.txt', fingerprint: true, onlyIfSuccessful: true
            archiveArtifacts allowEmptyArchive: true, artifacts: 'deploy/powervc.tfvars', fingerprint: true, onlyIfSuccessful: false
            cleanWs()
            //notifyBySlack(currentBuild.result, '#cloud-ci', 'cloud-ci')
        }
    }
}
