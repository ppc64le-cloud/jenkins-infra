@Library('pcloud-jenkins-library') _
pipeline {
    agent {
        dockerfile {
            dir 'images/powervs'
            additionalBuildArgs '--force-rm	--no-cache'
            args '-v /etc/resolv.conf:/etc/resolv.conf'
            label 'daily-x86_64'
        }
    }
    environment {
        //users and credentials. All must be defined in Jenkins Credentials
        GITHUB_USER = credentials('GITHUB_USER')
        IBMCLOUD_API_KEY = credentials('IBMCLOUD_API_KEY')
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        REDHAT_USERNAME = credentials('REDHAT_USERNAME')
        REDHAT_PASSWORD = credentials('REDHAT_PASSWORD')
        PULL_SECRET = credentials('PULL_SECRET')

        //Env constants
        TERRAFORM_VER = "0.13.4"
        IBM_CLOUD_REGION = "syd"
        IBM_CLOUD_ZONE = "syd04"
        SERVICE_INSTANCE_ID = "6d030c4b-64a3-494d-aeed-8c453dd98903"

        BASTION_IMAGE_NAME = "rhel-83-02182021"
        RHCOS_IMAGE_NAME = "rhcos-46-09182020"
        OCP_RELEASE = "4.6"

        //e2e specific variables
        ENABLE_E2E_TEST = "false"
        GOLANG_TARBALL = "https://golang.org/dl/go1.15.2.linux-ppc64le.tar.gz"

        //Script arguments
        RELEASE_VER="4.6"

        TARGET = "deploy-openshift4-powervs-script"
        TEMPLATE_FILE = ".${TARGET}.tfvars.template"
        POWERVS = true
        SCRIPT_DEPLOYMENT = true
        WAIT_FOR_DEBUG = "1"

        // Type of configuration
        CONFIG_TYPE="min"
	 }

    stages {
        stage('Setup Common Environment Variables') {
            steps {
                setupCommonEnvironmentVariables()
                //Min config with 3 worker nodes
                setupClusterConfig("${CONFIG_TYPE}","3")
            }
        }
        stage('pull artifact') {
            steps {
                getArtifacts("mirror-openshift-release", "latest-${OCP_RELEASE}-build.txt" )
            }
        }
        //Checkout the installer git repo
        stage('Prepare Terraform Template') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try
                    {
                        pullSecret()
                        env.OPENSHIFT_IMAGE = ""
                        env.OCP_RELEASE_TAG = ""
                        if (fileExists("deploy/artifactory/latest-${OCP_RELEASE}-build.txt")) {
                            env.OPENSHIFT_IMAGE = readFile "deploy/artifactory/latest-${OCP_RELEASE}-build.txt"
                            env.OPENSHIFT_IMAGE = env.OPENSHIFT_IMAGE.trim()
                            env.OCP_RELEASE_TAG = env.OPENSHIFT_IMAGE.split(":")[1].trim()
                        }
                        else {
                            echo "latest-${OCP_RELEASE}-build.txt file does not exist. Please check mirror-openshift-release job"
                            throw err
                        }
                        env.OPENSHIFT_INSTALL_TARBALL=getOpenshiftBuild(OCP_RELEASE)
                        env.OPENSHIFT_CLIENT_TARBALL=getOpenshiftClient(OCP_RELEASE)
                        env.OPENSHIFT_CLIENT_TARBALL_AMD64=getOpenshiftClientAMD(OCP_RELEASE)
                    }
                    catch (err)
                    {
                        echo 'Error ! Template preparation failed !'
                        throw err
                    }
                }
            }
        }
        stage('Initialize Environment') {
            steps {
                initializeEnvironment()
            }
        }
        stage('Deploy OCP Cluster') {
            steps {
                deployCluster()
            }
        }
        stage('Setup Kubectl') {
            steps {
                setupKubeconfigOcp4()
            }
        }
        stage('Run crontab script for capturing outputs of multiple commands') {
            steps {
                crontabCommandCaptureScript()
            }
        }
        stage('Run scale test') {
            steps {
                setupAndRunScaleTest()
            }
        }

        stage('Gather post pprof and prometheus data') {
            steps {
                gatherPrometheusData()
            }
        }
    }
    post {
        always {
            archiveAllArtifacts("deploy/time_taken_namespaces", "deploy/time_taken_deployments", "deploy/vars.tfvars",
                "cpu-pre.pprof", "heap-pre.pprof", "prometheus.tar.gz", "deploy/cron.log", "deploy/logs.tar.gz")
            cleanupOcp4Cluster()
            checkInfraError()
            processScaleResults()
            dbDashboardUpdateScale()
            notifyBySlack(currentBuild.result, env.MESSAGE)
            cleanWs()
        }
    }
}
