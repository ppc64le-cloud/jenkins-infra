@Library('pcloud-jenkins-library') _
//Define global variables
env.DISTRO = ""

pipeline {
    agent {
        dockerfile {
            dir 'images/powervs'
            additionalBuildArgs '--force-rm	--no-cache'
            args '-v /etc/resolv.conf:/etc/resolv.conf'
            label 'daily-x86_64'
        }
    }
    environment {
        //users and credentials. All must be defined in Jenkins Credentials
        GITHUB_USER = credentials('GITHUB_USER')
        IBMCLOUD_API_KEY = credentials('IBMCLOUD_API_KEY')
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        REDHAT_USERNAME = credentials('REDHAT_USERNAME')
        REDHAT_PASSWORD = credentials('REDHAT_PASSWORD')

        //Env constants
        TERRAFORM_VER = "0.13.4"
        IBM_CLOUD_REGION = "us-south"
        IBM_CLOUD_ZONE = "us-south"
        SERVICE_INSTANCE_ID = "7cf52a5e-54eb-402c-a62f-0b15ddb80ae8"

        BASTION_MEMORY = "8"
        BASTION_PROCESSORS = ".5"
        VM_ID_PREFIX = "ltccci"
        BASTION_IMAGE_NAME = "rhel-83-02182021"

        SYSTEM_TYPE = "e880"
        NETWORK_NAME = "ocp-net"
        RHEL_USERNAME = "root"
        RHEL_SMT = "4"

        //Makefile variables
        TERRAFORM_FORCE_KEYPAIR_CREATION = "0" //For not using build-barnes
        OPENSHIFT_POWERVS_SINGLE_INSTANCE_GIT_TF_DEPLOY_BRANCH="master" //The download branch

        TARGET = "deploy-openshift4-powervs-single-instance"
        TEMPLATE_FILE = ".${TARGET}.tfvars.template"

        //To pick build-harness for creating single powervs instance
        BUILD_HARNESS_ORG="powercloud-cicd"
        BUILD_HARNESS_BRANCH="master"
        POWERVS = true
        SCRIPT_DEPLOYMENT = false
        WAIT_FOR_DEBUG = "0"
	}
    stages {
        stage('Initialize Environment') {
            steps {
                initializeEnvironment()
            }
        }
        stage('Deploy VM') {
            steps {
                deployCluster()
            }
        }

        stage('Stability Check') {
            steps {
                checkStability()
             }
        }
    }

    post {
        always {
            getArtifactsAndCleanOcp4()
            script {
                archiveAllArtifacts("deploy/vars.tfvars", "deploy/stability-check.log")
                message = "VM Image:`${env.BASTION_IMAGE_NAME}`, System Type: `${env.SYSTEM_TYPE}`, Private Network: `${env.NETWORK_NAME}` "
                notifyBySlack(currentBuild.result, message)
                cleanWs()
            }
        }
    }
}
