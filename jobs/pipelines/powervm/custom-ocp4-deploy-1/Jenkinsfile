@Library('pcloud-jenkins-library') _

//Get Infra and OS from user
properties([
    parameters([
        [$class: 'ChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select the Type of OpenShift Build',
            filterLength: 1,
            filterable: false,
            name: 'OCPBuild',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return[\'Could not get Env\']'
                ],
                script: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return["Nightly:selected","Released"]'
                ]
            ]
        ],

        [$class: 'ChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select the OpenShift Release',
            filterLength: 1,
            filterable: false,
            name: 'Release',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return[\'Could not get Env\']'
                ],
                script: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return["4.3:selected","4.4","4.5","4.6", "4.7","4.8"]'
                ]
            ]
       ],

        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select the OpenShift Build',
            filterLength: 1,
            filterable: false,
            name: 'Build',
            referencedParameters: 'OCPBuild, Release',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return[\'Could not get Environment from Env Param\']'
                ],
                script: [
                    classpath: [],
                    sandbox: false,
                    script:
                        '''
                        if (OCPBuild.equals("Nightly")) {
                            def command = """ wget  --output-document  -  https://openshift-release-ppc64le.svc.ci.openshift.org/"""
                            build = command.execute().text
                            def min1 = ~/<a class="text-success" href="/
                            def min2 = ~/\\[/
                            def min3 = ~/\\]/
                            def min4 = ~/<a.*">/
                            def min5 = ~/<\\/a><\\/td>/
                            def ls =''
                            build.eachLine{
                                if (it =~ /<td/) {
                                    String lst = it.findAll(/<a class="text-success" href=".*/)
                                    if (lst.contains (Release)) {
                                        if (lst.contains("nightly")){
                                            ls = ls + " " + (lst - min4)
                                            ls = ls - min5
                                            ls = ls - min2
                                            ls = ls - min3
                                        }
                                    }

                                }
                            }
                            bld = ls.split() as List
                            bld = bld.sort()
                            bld = bld.reverse()
                            return bld
                        }
                        else if (OCPBuild.equals("Released")) {
                            def command = """ wget  --output-document  -  https://openshift-release-ppc64le.svc.ci.openshift.org/"""
                            build = command.execute().text
                            def min1 = ~/<a class="text-success" href="/
                            def min2 = ~/\\[/
                            def min3 = ~/\\]/
                            def min4 = ~/<a.*">/
                            def min5 = ~/<\\/a><\\/td>/
                            def ls =''
                            build.eachLine{
                                if (it =~ /<td/) {
                                    String lst = it.findAll(/<a class="text-success" href=".*/)
                                    if (lst.contains (Release)) {
                                        if ( ! lst.contains("nightly")){
                                            ls = ls + " " + (lst - min4)
                                            ls = ls - min5
                                            ls = ls - min2
                                            ls = ls - min3
                                        }
                                    }

                                }
                            }
                            bld = ls.split() as List
                            bld = bld.sort()
                            bld = bld.reverse()
                            return bld

                        }
                        else
                        {
                            return["NOT REQUIRED"]
                        }
                        '''
                ]
            ]
        ],

        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select the Type of OpenShift Build',
            filterLength: 1,
            filterable: false,
            name: 'OCPBuildUpgrade',
            referencedParameters: 'e2eUpgrade',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return[\'Could not get Env\']'
                ],
                script: [
                    classpath: [],
                    sandbox: false,
                    script:
                    '''
                    if (e2eUpgrade) {
                        return["Nightly:selected","Released"]
                        }
                        else {
                            return[\'NOT REQUIRED\']
                        }

                    '''
                ]
            ]
        ],

        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select the OpenShift Release to which the cluster to be upgraded',
            filterLength: 1,
            filterable: false,
            name: 'ReleaseUpgrade',
            referencedParameters: 'e2eUpgrade',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return[\'Could not get Env\']'
                ],
                script: [
                    classpath: [],
                    sandbox: false,
                    script:
                    '''
                    if (e2eUpgrade) {
                        return["4.3","4.4:selected","4.5","4.6", "4.7", "4.8"]
                    }
                    else {
                            return[\'NOT REQUIRED\']
                    }
                    '''
                ]
            ]
        ],

        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select the OpenShift Build to which the cluster to be Upgraded',
            filterLength: 1,
            filterable: false,
            name: 'BuildUpgrade',
            referencedParameters: 'OCPBuildUpgrade, ReleaseUpgrade, e2eUpgrade',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return[\'Could not get Environment from Env Param\']'
                ],
                script: [
                    classpath: [],
                    sandbox: false,
                    script:
                        '''
                        if (e2eUpgrade) {
                            if (OCPBuildUpgrade.equals("Nightly")) {
                                def command = """ wget  --output-document  -  https://openshift-release-ppc64le.svc.ci.openshift.org/"""
                                build = command.execute().text
                                def min1 = ~/<a class="text-success" href="/
                                def min2 = ~/\\[/
                                def min3 = ~/\\]/
                                def min4 = ~/<a.*">/
                                def min5 = ~/<\\/a><\\/td>/
                                def ls =''
                                build.eachLine{
                                    if (it =~ /<td/) {
                                        String lst = it.findAll(/<a class="text-success" href=".*/)
                                        if (lst.contains (ReleaseUpgrade)) {
                                            if (lst.contains("nightly")){
                                                ls = ls + " " + (lst - min4)
                                                ls = ls - min5
                                                ls = ls - min2
                                                ls = ls - min3
                                            }
                                        }

                                    }
                                }
                                bld = ls.split() as List
                                bld = bld.sort()
                                bld = bld.reverse()
                                return bld
                            }
                            else if (OCPBuildUpgrade.equals("Released")) {
                                def command = """ wget  --output-document  -  https://openshift-release-ppc64le.svc.ci.openshift.org/"""
                                build = command.execute().text
                                def min1 = ~/<a class="text-success" href="/
                                def min2 = ~/\\[/
                                def min3 = ~/\\]/
                                def min4 = ~/<a.*">/
                                def min5 = ~/<\\/a><\\/td>/
                                def ls =''
                                build.eachLine{
                                    if (it =~ /<td/) {
                                        String lst = it.findAll(/<a class="text-success" href=".*/)
                                        if (lst.contains (ReleaseUpgrade)) {
                                            if ( ! lst.contains("nightly")){
                                                ls = ls + " " + (lst - min4)
                                                ls = ls - min5
                                                ls = ls - min2
                                                ls = ls - min3
                                            }
                                        }

                                    }
                                }
                                bld = ls.split() as List
                                bld = bld.sort()
                                bld = bld.reverse()
                                return bld
                            }
                            else
                            {
                                return["NOT REQUIRED"]
                            }
                        }
                        else {
                            return[\'NOT REQUIRED\']
                        }
                        '''
                ]
            ]
        ],

        [$class: 'ChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select the Server type from the Dropdown List',
            filterLength: 1,
            filterable: false,
            name: 'AvailabilityZone',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return[\'Could not get Env\']'
                ],
                script: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return["p8_pvm:selected","p9_pvm"]'
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select the Bastion OS from the Dropdown List',
            filterLength: 1,
            filterable: false,
            name: 'BastionOs',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return[\'Could not get Environment from Env Param\']'
                ],
                script: [
                    classpath: [],
                    sandbox: false,
                    script:
                        ''' return["rhel-8.3:selected","rhel-8.2","rhel-8.1","rhel-8.0"]
                        '''
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select the network from the Dropdown List',
            filterLength: 1,
            filterable: false,
            name: 'BastionOs',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return[\'Could not get Environment from Env Param\']'
                ],
                script: [
                    classpath: [],
                    sandbox: false,
                    script:
                        ''' return["icp_network4:selected", "icp_network", "icp_network2"]
                        '''
                ]
            ]
        ]
    ])
])

pipeline {
    agent {
        dockerfile {
            dir 'images/terraform'
            additionalBuildArgs '--force-rm	--no-cache'
            args '-v /etc/resolv.conf:/etc/resolv.conf'
            label 'daily-x86_64'
        }
    }
    parameters {
        //Master parameters
        string(defaultValue: '1', description: 'Required Number of VCPUs Master', name: 'VcpusMaster')
        string(defaultValue: '16', description: 'Required amount Memory Master', name: 'MemMaster')
        string(defaultValue: '.5', description: 'Required Processing Units Specify a value of processor units that is not greater than the value of virtual processors or less than five percent of the value of virtual processors.', name: 'ProcessorMaster')
        string(defaultValue: '3', description: 'Enter Number of Masters needed', name: 'NumOfMasters')

        //Worker parameters
        string(defaultValue: '2', description: 'Required Number of VCPUs Worker', name: 'VcpusWorker')
        string(defaultValue: '16', description: 'Required amount Memory Worker', name: 'MemWorker')
        string(defaultValue: '.5', description: 'Required Processing Units Specify a value of processor units that is not greater than the value of virtual processors or less than five percent of the value of virtual processors.', name: 'ProcessorWorker')
        string(defaultValue: '2', description: 'Enter Number of workers needed', name: 'NumOfWorkers')

        string(defaultValue: '0', description: 'Enter time(in Minutes) to retain the cluster', name: 'KeepFor')
        string(defaultValue: '', description: 'Enter Registry link for the OCP Build. This will override the Build', name: 'Ocpimage')
        booleanParam(defaultValue: false, name: 'Rune2e', description: 'Select if you want to run e2e tests. e2e runs before upgrade, if e2eUpgrade is enabled')
        booleanParam(defaultValue: false, name: 'e2eUpgrade', description: 'Select if you want to run e2eUpgrade')
        booleanParam(defaultValue: false, name: 'DeployCS', description: 'Select if you want to install Common Services')
        booleanParam(defaultValue: false, name: 'RunAcmeair', description: 'Select if you want to run Acmeair deployment')
    }
    environment {
        //users and credentials. All must be defined in Jenkins Credentials
        GITHUB_USER = credentials('GITHUB_USER')
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        OS_USERNAME = credentials('OS_USERNAME')
        OS_PASSWORD = credentials('OS_PASSWORD')
        DOCKER_USER = credentials('DOCKER_USER')
        ARTIFACTORY_USER = credentials('ARTIFACTORY_USER')
        ARTIFACTORY_TOKEN = credentials('ARTIFACTORY_TOKEN')
        REDHAT_USERNAME = credentials('REDHAT_USERNAME')
        REDHAT_PASSWORD = credentials('REDHAT_PASSWORD')
        PULL_SECRET = credentials('PULL_SECRET')

        //Env constants
        TERRAFORM_VER = "0.13.0"
        TARGET = "deploy-openshift4-powervc"
        TEMPLATE_FILE = ".${TARGET}.tfvars.template"
        POWERVS = false
        ENABLE_SCALE_TEST = "false"
        WAIT_FOR_DEBUG = "1"
        //Branch
        OPENSHIFT_POWERVC_GIT_TF_DEPLOY_BRANCH="master"//The download branch
        GOLANG_TARBALL="https://dl.google.com/go/go1.15.2.linux-ppc64le.tar.gz"

        ENABLE_E2E_TEST = "${params.Rune2e}"
        AVAILABILITY_ZONE = "${params.AvailabilityZone}"
        BASTION_OS  = "${params.BastionOs}"
        TIMEOUT = "${params.KeepFor}"
        CS_INSTALL = "${params.DeployCS}"
        RUN_ACMEAIR = "${params.RunAcmeair}"
        OCP_RELEASE="${params.Release}"
        ENABLE_E2E_UPGRADE = "${params.e2eUpgrade}"
        OPENSHIFT_UPGRADE_IMAGE = "${params.BuildUpgrade}"
	}

	stages {
        stage('Setup Common Environment Variables') {
            steps {
                setupCommonEnvironmentVariables()
                script{
                    //Set environment variables from parameters
                    env.MASTER_VCPUS = "${params.VcpusMaster}"
                    env.MASTER_MEMORY = "${params.MemMaster}"
                    env.MASTER_PROCESSORS = "${params.ProcessorMaster}"
                    env.NUM_OF_MASTERS = "${params.NumOfMasters}"

                    env.WORKER_VCPUS = "${params.VcpusWorker}"
                    env.WORKER_MEMORY = "${params.MemWorker}"
                    env.WORKER_PROCESSORS = "${params.ProcessorWorker}"
                    env.NUM_OF_WORKERS = "${params.NumOfWorkers}"

                    env.OS_NETWORK = "${params.Network}"
                    env.OS_PRIVATE_NETWORK = "${params.Network}"
                }
            }
        }
        stage('pull artifact') {
            steps {
                script {
                    getArtifacts("poll-powervc-images", "cicd-rhcos-${OCP_RELEASE}.latest.txt")
                    getArtifacts("poll-powervc-images", "cicd-${BASTION_OS}.latest.txt")
                }
            }
        }
        //Checkout the installer git repo
        stage('Prepare Terraform Template') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    wrap([$class: 'BuildUser']) {
                        env.INSTANCE_NAME = "${BUILD_USER_FIRST_NAME}"
                        env.INSTANCE_NAME = env.INSTANCE_NAME.toLowerCase()
                    }
                    try
                    {
                        gbToMb()
                        pullSecret()
                        env.OPENSHIFT_IMAGE=(params.Ocpimage == "") ? "sys-powercloud-docker-local.artifactory.swg-devops.com/ocp-ppc64le/release-ppc64le:${params.Build}" : "${params.Ocpimage}"
                        if (fileExists("deploy/artifactory/cicd-rhcos-${OCP_RELEASE}.latest.txt")) {
                            env.RHCOS_IMAGE = readFile "deploy/artifactory/cicd-rhcos-${OCP_RELEASE}.latest.txt"
                            env.RHCOS_IMAGE_NAME = env.RHCOS_IMAGE.split()[0].trim()
                            env.RHCOS_IMAGE_ID = env.RHCOS_IMAGE.split()[1].trim()
                        }
                        if (fileExists("deploy/artifactory/cicd-rhel-${REDHAT_RELEASE}.latest.txt")) {
                            env.BASTION_IMAGE = readFile "deploy/artifactory/cicd-cicd-${BASTION_OS}.latest.txt"
                            env.BASTION_IMAGE_NAME = env.BASTION_IMAGE.split()[0].trim()
                            env.BASTION_IMAGE_ID = env.BASTION_IMAGE.split()[1].trim()
                        }
                        env.OPENSHIFT_INSTALL_TARBALL=getOpenshiftBuild(OCP_RELEASE)
                        env.OPENSHIFT_CLIENT_TARBALL=getOpenshiftClient(OCP_RELEASE)
                        env.OPENSHIFT_CLIENT_TARBALL_AMD64=getOpenshiftClientAMD(OCP_RELEASE)

                        createTemplate(env.OS_AUTH_URL, env.MASTER_VCPUS , "${MASTER_MEMORY_MB}", env.MASTER_PROCESSORS, env.MASTER_TEMPLATE)
                        createTemplate(env.OS_AUTH_URL, env.WORKER_VCPUS , "${WORKER_MEMORY_MB}", env.WORKER_PROCESSORS, env.WORKER_TEMPLATE)
                        createTemplate(env.OS_AUTH_URL, env.BASTION_VCPUS , "${BASTION_MEMORY_MB}", env.BASTION_PROCESSORS, env.BASTION_TEMPLATE)
                        createTemplate(env.OS_AUTH_URL, env.BOOTSTRAP_VCPUS , "${BOOTSTRAP_MEMORY_MB}", env.BOOTSTRAP_PROCESSORS, env.BOOTSTRAP_TEMPLATE)
                    }
                    catch (err)
                    {
                        echo 'Error ! Template preparation failed !'
                        cleanupOcp4Cluster()
                        throw err
                    }
                }
            }
        }
        stage('Initialize Environment') {
            steps {
                setupTerraformPlugin()
                initializeEnvironment()
            }
        }
        stage('Deploy OCP Cluster') {
            steps {
                deployCluster()
            }
        }
        stage('Run crontab script for capturing outputs of multiple commands') {
            steps {
                crontabCommandCaptureScript()
            }
        }
        stage('Setup Kubectl') {
            steps {
                setupKubeconfigOcp4()
            }
        }
        stage('Setup and run ansible extra') {
            when { expression { return env.RUN_ACMEAIR == "true"; } }
            steps {
               cloneRepo("git@github.ibm.com:redstack-power/ocp4_ansible_extras.git", "ansible_extra")
               setupAndRunE2e()
            }
        }
        stage('Clone and Run Acmeair'){
           when { expression { return env.ENABLE_E2E_TEST == "true"; } }
            steps{
                runAcmeair()
            }
        }

        stage('Waiting to timeout') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        TIMEOUT_MIN = TIMEOUT.toInteger()
                        if ( TIMEOUT_MIN != 0 )
                        {
                            TIMEOUT_SEC=TIMEOUT_MIN*60
                        }
                        echo "HOLDING THE CLUSTER TEAR DOWN FOR ${TIMEOUT_MIN} MINUTES"
                        sleep TIMEOUT_SEC
                        }
                    finally {
                        cleanupOcp4Cluster()
                    }
                }
            }
        }
    }
    post {
        always {
            cleanupOcp4Cluster()
            archiveAllArtifacts("deploy/conformance-parallel-out.txt.tar.gz", "deploy/summary.txt", "deploy/vars.tfvars",
             "deploy/cron.log")
            checkInfraError()
            script {
                if (env.ENABLE_E2E_TEST) {
                    processE2eResults()
                }
            }
            notifyBySlack(currentBuild.result, env.MESSAGE)
            cleanWs()
        }
    }
}
