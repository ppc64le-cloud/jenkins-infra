@Library('pcloud-jenkins-library') _
//Define global variables
def E2E_SUMMARY
def E2E_UPGRADE_SUMMARY
def JUNIT_E2E
def JUNIT_E2E_UPGRADE
env.BASTION_IP = ""
boolean DEPLOYMENT_STATUS = false

pipeline {
    agent {
        dockerfile {
            dir 'images/terraform'
            additionalBuildArgs '--force-rm	--no-cache'
            args '-v /etc/resolv.conf:/etc/resolv.conf'
            label 'daily-x86_64'
        }
    }
    environment {
        //users and credentials. All must be defined in Jenkins Credentials
        GITHUB_USER = credentials('GITHUB_USER')
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        OS_USERNAME = credentials('OS_USERNAME')
        OS_PASSWORD = credentials('OS_PASSWORD')
        DOCKER_USER = credentials('DOCKER_USER')
        ARTIFACTORY_USER = credentials('ARTIFACTORY_USER')
        ARTIFACTORY_TOKEN = credentials('ARTIFACTORY_TOKEN')
        REDHAT_USERNAME = credentials('REDHAT_USERNAME')
        REDHAT_PASSWORD = credentials('REDHAT_PASSWORD')
        PULL_SECRET = credentials('PULL_SECRET')

        //Env constants
        TERRAFORM_VER = "0.12.13"
        HARDWARE_CHOSE = "P8"
        AVAILABILITY_ZONE = "p8_pvm"
        OCP_RELEASE="4.4"
        TARGET = "deploy-openshift4-powervc"
        TEMPLATE_FILE = ".${TARGET}.tfvars.template"
        POWERVS = false
        WAIT_FOR_DEBUG = "1"
        REDHAT_RELEASE = "8.3"

        //Makefile variables
        OPENSHIFT_POWERVC_GIT_TF_DEPLOY_BRANCH="release-4.5" //The download branch
        UPGRADE_DELAY_TIME =  "600"
        UPGRADE_PAUSE_TIME = "90"
        UPGRADE_CHANNEL = "fast-4.5"

        // Type of configuration
        CONFIG_TYPE="min"
	 }

    stages {
        stage('Setup Common Environment Variables') {
            steps {
                setupCommonEnvironmentVariables()
                setupClusterConfig("${CONFIG_TYPE}")
            }
        }
        stage('pull artifact') {
            steps {
                script {
                    getArtifacts("mirror-openshift-release", "latest-${OCP_RELEASE}-stable-build.txt")
                    getArtifacts("mirror-openshift-release", "latest-4.5-stable-build.txt")
                    getArtifacts("poll-powervc-images", "cicd-rhcos-${OCP_RELEASE}.latest.txt")
                    getArtifacts("poll-powervc-images", "cicd-rhel-${REDHAT_RELEASE}.latest.txt")
                }
            }
        }
        //Checkout the installer git repo
        stage('Prepare Terraform Template') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try
                    {
                        gbToMb()
                        pullSecret()
                        env.OPENSHIFT_IMAGE = ""
                        if (fileExists("deploy/artifactory/latest-${OCP_RELEASE}-build.txt")) {
                            env.OPENSHIFT_IMAGE = readFile "deploy/artifactory/latest-${OCP_RELEASE}-build.txt"
                            env.OPENSHIFT_IMAGE = env.OPENSHIFT_IMAGE.trim()
                            env.OCP_RELEASE_TAG = env.OPENSHIFT_IMAGE.split(":")[1].trim()
                        }
                        else {
                            echo "latest-${OCP_RELEASE}-build.txt file does not exist. Please check mirror-openshift-release job"
                            throw err
                        }
                        if (fileExists("deploy/artifactory/cicd-rhcos-${OCP_RELEASE}.latest.txt")) {
                            env.RHCOS_IMAGE = readFile "deploy/artifactory/cicd-rhcos-${OCP_RELEASE}.latest.txt"
                            env.RHCOS_IMAGE_NAME = env.RHCOS_IMAGE.split()[0].trim()
                            env.RHCOS_IMAGE_ID = env.RHCOS_IMAGE.split()[1].trim()
                        }
                        else {
                            echo "cicd-rhcos-${OCP_RELEASE}.latest.txt file does not exist. Please check poll-powervc-images job"
                            throw err
                        }
                        if (fileExists("deploy/artifactory/cicd-rhel-${REDHAT_RELEASE}.latest.txt")) {
                            env.BASTION_IMAGE = readFile "deploy/artifactory/cicd-rhel-${REDHAT_RELEASE}.latest.txt"
                            env.BASTION_IMAGE_NAME = env.BASTION_IMAGE.split()[0].trim()
                            env.BASTION_IMAGE_ID = env.BASTION_IMAGE.split()[1].trim()
                        }
                        else {
                            echo "cicd-rhel-${REDHAT_RELEASE}.latest.txt file does not exist. Please check poll-powervc-images job"
                            throw err
                        }
                        if (fileExists('deploy/artifactory/latest-4.5-stable-build.txt')) {
                            env.UPGRADE_IMAGE  = readFile 'deploy/artifactory/latest-4.5-stable-build.txt'
                            env.UPGRADE_IMAGE  = env.UPGRADE_IMAGE.trim()
                            env.UPGRADE_VERSION = env.UPGRADE_IMAGE.split(":")[1]
                        }
                        else {
                            echo "latest-4.5-stable-build.txt file does not exist. Please check mirror-openshift-release job"
                            throw err
                        }
                        if (env.DEPLOY_MASTER == "false")
                        {
                            echo "Cluster cant deploy without master"
                            throw err
                        }
                        env.OPENSHIFT_INSTALL_TARBALL=getOpenshiftBuild(OCP_RELEASE)
                        env.OPENSHIFT_CLIENT_TARBALL=getOpenshiftClient(OCP_RELEASE)
                        env.OPENSHIFT_CLIENT_TARBALL_AMD64=getOpenshiftClientAMD(OCP_RELEASE)

                        createTemplate(env.OS_AUTH_URL, env.MASTER_VCPUS , "${MASTER_MEMORY_MB}", env.MASTER_PROCESSORS, env.MASTER_TEMPLATE)
                        createTemplate(env.OS_AUTH_URL, env.WORKER_VCPUS , "${WORKER_MEMORY_MB}", env.WORKER_PROCESSORS, env.WORKER_TEMPLATE)
                        createTemplate(env.OS_AUTH_URL, env.BASTION_VCPUS , "${BASTION_MEMORY_MB}", env.BASTION_PROCESSORS, env.BASTION_TEMPLATE)
                        createTemplate(env.OS_AUTH_URL, env.BOOTSTRAP_VCPUS , "${BOOTSTRAP_MEMORY_MB}", env.BOOTSTRAP_PROCESSORS, env.BOOTSTRAP_TEMPLATE)
                    }
                    catch (err)
                    {
                        echo 'Error ! Template preparation failed !'
                        throw err
                    }
                }
            }
        }
        stage('Initialize Environment') {
            steps {
                setupTerraformPlugin()
                initializeEnvironment()
            }
        }
        stage('Deploy OCP Cluster') {
            steps {
                deployCluster()
            }
        }
        stage('Run crontab script for capturing outputs of multiple commands') {
            steps {
                crontabCommandCaptureScript()
            }
        }
        stage('Setup Kubectl') {
            steps {
                setupKubeconfigOcp4()
            }
        }
    }
    post {
        always {
            archiveAllArtifacts("deploy/conformance-parallel-out.txt.tar.gz", "deploy/summary.txt", "deploy/vars.tfvars" "deploy/e2e-upgrade-summary.txt")
            cleanupOcp4Cluster()
            checkInfraError()
            script {
                if (fileExists('deploy/summary.txt')) {
                    E2E_SUMMARY = readFile 'deploy/summary.txt'
                    E2E_SUMMARY = E2E_SUMMARY.trim()
                }
                if (fileExists('deploy/e2e-upgrade-summary.txt')) {
                    E2E_UPGRADE_SUMMARY = readFile 'deploy/e2e-upgrade-summary.txt'
                    E2E_UPGRADE_SUMMARY = E2E_UPGRADE_SUMMARY.trim()
                }
                E2E_SUMMARY = "e2e: " + E2E_SUMMARY + "   e2eUpgrade: " + E2E_UPGRADE_SUMMARY
                if ( env.OPENSHIFT_IMAGE != ""  ) {
                    env.OPENSHIFT_INSTALL_TARBALL = env.OPENSHIFT_IMAGE + " to " + env.UPGRADE_IMAGE
                }
                JUNIT_E2E = fileExists 'deploy/junit_e2e.xml'
                JUNIT_E2E_UPGRADE = fileExists 'deploy/junit_e2e_upgrade.xml'
                if ( JUNIT_E2E ) {
                    step([$class: 'JUnitResultArchiver', allowEmptyResults: true,  testResults: 'deploy/junit_e2e.xml'])
                }
                if ( JUNIT_E2E_UPGRADE ) {
                    step([$class: 'JUnitResultArchiver', allowEmptyResults: true,  testResults: 'deploy/junit_e2e_upgrade.xml'])
                }
                if ( JUNIT_E2E == false &&  JUNIT_E2E_UPGRADE == false ) {
                    step([$class: 'JUnitResultArchiver', allowEmptyResults: true,  testResults: 'hack/dummy-test-summary.xml'])
                    currentBuild.result = 'FAILURE'
                }
                OCP4_BUILD = env.OPENSHIFT_INSTALL_TARBALL.split(':')[1]
                message = "e2e summary:`${E2E_SUMMARY}`, OCP4 Build: `${OCP4_BUILD}`, RHCOS: `${env.RHCOS_IMAGE_NAME}` "
                dbDashboardUpdateE2e()
            }
            cleanWs()
            notifyBySlack(currentBuild.result, message)
        }
    }
}
