@Library('pcloud-jenkins-library') _

pipeline {
    agent {
        dockerfile {
            dir 'images/powervs'
            additionalBuildArgs '--force-rm	--no-cache'
            args '-v /etc/resolv.conf:/etc/resolv.conf'
            label 'daily-x86_64'
        }
    }
    environment {
        //users and credentials. All must be defined in Jenkins Credentials
        GITHUB_USER = credentials('GITHUB_USER')
        IBMCLOUD_API_KEY = credentials('IBMCLOUD_API_KEY')
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        REDHAT_USERNAME = credentials('REDHAT_USERNAME')
        REDHAT_PASSWORD = credentials('REDHAT_PASSWORD')
        PULL_SECRET = credentials('PULL_SECRET')

        //Env constants
        TERRAFORM_VER = "0.13.4"
        IBM_CLOUD_REGION = "us-east"
        IBM_CLOUD_ZONE = "us-east"
        SERVICE_INSTANCE_ID = "8aec6256-b197-4fe5-afcf-7507be7aa77b"

        BASTION_MEMORY = "8"
        BASTION_PROCESSORS = ".5"

        BASTION_IMAGE = "rhel-83"
        VM_ID_PREFIX = "ltccci"
        SYSTEM_TYPE = "s922"
        NETWORK_NAME = "ocp-net"
        RHEL_USERNAME = "root"
        RHEL_SMT = "4"
        BASTION_IMAGE_FILE = "latest-${BASTION_IMAGE}-ocp-cicd-washington.txt"

        //Makefile variables
        OPENSHIFT_POWERVS_SINGLE_INSTANCE_GIT_TF_DEPLOY_BRANCH="master" //The download branch

        TARGET = "deploy-openshift4-powervs-single-instance"
        TEMPLATE_FILE = ".${TARGET}.tfvars.template"

        POWERVS = true
        SCRIPT_DEPLOYMENT = false
        WAIT_FOR_DEBUG = "0"
	 }

    stages {
        stage('Pull PowerVS Image'){
            steps{
                getArtifacts("poll-powervs-image", "${BASTION_IMAGE_FILE}" )
            }
        }
        stage('Initialize Environment') {
            steps {
                initializeEnvironment()
                setupTerraformPlugin()
                script{
                    if (fileExists("deploy/artifactory/${BASTION_IMAGE_FILE}")) {
                            env.BASTION_IMAGE_NAME = readFile "deploy/artifactory/${BASTION_IMAGE_FILE}"
                            env.BASTION_IMAGE_NAME = env.BASTION_IMAGE_NAME.trim()
                    }
                    else{
                        echo "${BASTION_IMAGE_FILE} file does not exist. Please check poll-powervs-job"
                        throw err
                    }
                }
            }
        }
        stage('Deploy VM') {
            steps {
                deployCluster()
            }
        }

        stage('Stability Check') {
            steps {
                checkStability()
             }
        }
    }

    post {
        always {
            script {
                archiveAllArtifacts("deploy/vars.tfvars", "deploy/stability-check.log")
                cleanupOcp4Cluster()
                message = "VM Image:`${env.BASTION_IMAGE_NAME}`, System Type: `${env.SYSTEM_TYPE}`, Private Network: `${env.NETWORK_NAME}` "
                notifyBySlack(currentBuild.result, message)
                cleanWs()
            }
        }
    }
}
